{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"5b505432e6c3e0c27203523adeff8487a47abe4c","modified":1484126035192},{"_id":"source/favicon.ico","hash":"cc5d26a909ca3051b7a4d87b8ce8a3a3f4f3bee5","modified":1484124652245},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1484111215745},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1484111215746},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1484111215747},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1484111215748},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1484111215748},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1484111215748},{"_id":"themes/next/README.en.md","hash":"f947d9a552da869f0dbef140ceeeb7b040b0f4a4","modified":1484111215749},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1484111215750},{"_id":"themes/next/_config.yml","hash":"7209f682b3dee8d24e55fb74eb694dd47828a48a","modified":1484164876045},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1484111215751},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1484111215751},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1484111215792},{"_id":"source/_posts/h.md","hash":"fd9c36b5fb620263684c00a8160e22a645e177f0","modified":1485064860759},{"_id":"source/_posts/hexo放到子目录并通过二级域名访问.md","hash":"729eb004df06ae1297038a8859974bb2b1dc98fe","modified":1484213339573},{"_id":"source/_posts/video标签的属性和方法总结.md","hash":"5a53753a64401ba1ee8c052ff09a0dd8273c384e","modified":1484474981642},{"_id":"source/_posts/工具集.md","hash":"b5ef79df6afe5c0e4826418f7f8a6e99d9d2113e","modified":1484474075019},{"_id":"source/_posts/高程笔记.md","hash":"652ee2f8ab19f14cc443d0a5a3a94242835ad2bd","modified":1484974595800},{"_id":"source/about/index.md","hash":"8656ef751d2cee8fcce6dc0cd60a2223a8ea268e","modified":1484118480444},{"_id":"source/categories/index.md","hash":"eea7d4dc0070febadc8553a0b64f6a98cd6be874","modified":1484118480591},{"_id":"source/tags/index.md","hash":"9ae21ebeef3520a101ab06de12f8e7e0ad37b1c1","modified":1484118443413},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1484111215747},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1484111215747},{"_id":"themes/next/l.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1484111215569},{"_id":"themes/next/l.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1484111215582},{"_id":"themes/next/l.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1484109194107},{"_id":"themes/next/l.git/index","hash":"7b571a0882ec6405132b59b002749040b166587a","modified":1484111215919},{"_id":"themes/next/l.git/packed-refs","hash":"12ca02d8374d9a441a6c8a6c9ed061432cb0a8c9","modified":1484111215558},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1484111215752},{"_id":"themes/next/languages/default.yml","hash":"fe00529a94bb2550194a31d178f5810b45014ab6","modified":1484111215752},{"_id":"themes/next/languages/en.yml","hash":"d02acdce503c86fbb01920ad22d31ec56fc285f1","modified":1484111215752},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1484111215753},{"_id":"themes/next/languages/fr-FR.yml","hash":"91cf55b9d75879e72c8008d2659fe2ea993a4cca","modified":1484111215753},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1484111215754},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1484111215754},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1484111215756},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1484111215755},{"_id":"themes/next/languages/ru.yml","hash":"402e676252ab1fc4522257a578738cb9536eb077","modified":1484111215756},{"_id":"themes/next/languages/zh-Hans.yml","hash":"db2c1fdbe4efca28dfd537574fa9d75c7ed02aad","modified":1484125467099},{"_id":"themes/next/languages/zh-hk.yml","hash":"a59f3f3114f5eb4d170a76da4359307e8f5159a7","modified":1484111215757},{"_id":"themes/next/languages/zh-tw.yml","hash":"18da1324d2212faca9a6e5e6ce98b419c86d4b0c","modified":1484111215757},{"_id":"themes/next/layout/_layout.swig","hash":"24de463d28bacbf2a28c34fecf082980f7f33a12","modified":1484111215761},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1484111215790},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1484111215790},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1484111215790},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1484111215791},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1484111215791},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1484111215791},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1484111215792},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1484111215793},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1484111215916},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1484111215917},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1484111215917},{"_id":"source/images/avatar.png","hash":"c48b6f2d4a652ade896afaf3fdbe357ed35307f2","modified":1482139289166},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484111215846},{"_id":"themes/next/l.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1484109194108},{"_id":"themes/next/l.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1484109194109},{"_id":"themes/next/l.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1484109194110},{"_id":"themes/next/l.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1484109194110},{"_id":"themes/next/l.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1484109194111},{"_id":"themes/next/l.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1484109194111},{"_id":"themes/next/l.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1484109194111},{"_id":"themes/next/l.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1484109194112},{"_id":"themes/next/l.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1484109194112},{"_id":"themes/next/l.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1484109194112},{"_id":"themes/next/l.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1484109194113},{"_id":"themes/next/l.git/logs/HEAD","hash":"da94967662354bd711a2d1bdd9ca3cbb51260e49","modified":1484111215573},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1484111215760},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1484111215760},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1484111215761},{"_id":"themes/next/layout/_macro/post.swig","hash":"216907a1348317114ccb90fecc752b8b7255b15b","modified":1484111215762},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1484111215762},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a42851e17d8961e5cae8b588d95a4a5456964972","modified":1484111215763},{"_id":"themes/next/layout/_partials/comments.swig","hash":"09da002fbeb0fe2ac3f180ecf77bce568ea989ca","modified":1484111215765},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1484111215765},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1484111215764},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1484111215766},{"_id":"themes/next/layout/_partials/head.swig","hash":"740684ef2b6e56183529387882042612e904bc8d","modified":1484111215767},{"_id":"themes/next/layout/_partials/header.swig","hash":"8985089c950d6df0efab9cd549a6b9ee50708ee2","modified":1484111215768},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1484111215768},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1484111215768},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1484111215769},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1484111215773},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1484111215773},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1484111215773},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e9beddda9758d8739c41fc8c67b2e72fc29c1244","modified":1484111215789},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1484111215793},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1484111215793},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1484111215794},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1484111215796},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1484111215795},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1484111215845},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1484111215846},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1484111215847},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1484111215847},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1484111215849},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1484111215848},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1484111215849},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1484111215850},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1484111215850},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1484111215851},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1484111215851},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1484111215851},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1484111215852},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1484111215852},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1484111215852},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484111215778},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484111215778},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484111215828},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484111215828},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484111215830},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484111215842},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484111215843},{"_id":"themes/next/l.git/refs/heads/master","hash":"2311b7302155cc3ec46e40ad16dc5c94e36328b4","modified":1484111215572},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1484111215758},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1484111215759},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1484111215767},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1484111215767},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1484111215769},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1484111215770},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1484111215770},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1484111215770},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1484111215771},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1484111215771},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1484111215772},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1484111215777},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1484111215779},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"188423f7df0eb8c99a03cb6741384415651c4665","modified":1484111215779},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"4f9efb15c9aaa016ac78d9f8aa2caefea87869df","modified":1484111215784},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1484111215787},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1484111215788},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f592adff22628b271ec9657b080cf6b9cc200615","modified":1484111215788},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1484111215788},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1484111215789},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1484111215827},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1484111215829},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1484111215830},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1484111215841},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c666e352c3b8e4ad0a16cc757b08f44ef9172182","modified":1484111215842},{"_id":"themes/next/source/css/_variables/base.styl","hash":"8b08a5ce4222aa731b180a12127bd0e52d12ede8","modified":1484111215843},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1484111215853},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1484111215853},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1484111215854},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1484111215855},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1484111215855},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1484111215855},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1484111215856},{"_id":"themes/next/source/js/src/utils.js","hash":"e34f83848883732ddd7a34a3e3ed2a293f0f76a7","modified":1484111215857},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1484111215858},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1484111215864},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1484111215864},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1484111215865},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1484111215876},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1484111215877},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1484111215877},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1484111215879},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1484111215882},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1484111215882},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1484111215884},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1484111215884},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1484111215885},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1484111215901},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1484111215903},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1484111215904},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1484111215904},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1484111215905},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1484111215906},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1484111215906},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1484111215909},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1484111215909},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1484111215914},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1484111215915},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1484111215915},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1484111215903},{"_id":"themes/next/l.git/logs/refs/heads/master","hash":"da94967662354bd711a2d1bdd9ca3cbb51260e49","modified":1484111215574},{"_id":"themes/next/l.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1484111215567},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1484111215780},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1484111215781},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1484111215780},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1484111215782},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1484111215782},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1484111215783},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1484111215783},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1484111215785},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1484111215785},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1484111215785},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1484111215786},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"f40a697fd046415924a142eec1effad70f3cb187","modified":1484111215787},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1484111215797},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1484111215798},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1484111215799},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1484111215799},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1484111215807},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1484111215817},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1484111215824},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1484111215825},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1484111215825},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1484111215827},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1484111215826},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1484111215827},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1484111215831},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1484111215832},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1484111215832},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1484111215833},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1484111215834},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1484111215834},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1484111215834},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1484111215836},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1484111215837},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1484111215836},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1484111215837},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1484111215838},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"34acb45007229b299951ce35d8eef642ea16fbe9","modified":1484111215839},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"221d3dbc04ff6c211ba9382397c4977e9f493153","modified":1484111215839},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"2ac844e3fbaaaf5df45f6469adf275a07fa71c9e","modified":1484116020976},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1484111215840},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"1be4ef3f97f329e2531bfd2dfdc40c0e46df35c8","modified":1484111215841},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1484111215841},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c2390263a298a2b78c5f941e6827c13f02e1ee85","modified":1484111215856},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1484111215865},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1484111215866},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1484111215867},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1484111215867},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1484111215869},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1484111215869},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1484111215874},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1484111215875},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1484111215875},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1484111215886},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1484111215886},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"3c1d63dd1176c77f9f4cdb1616fbb08c31b9822f","modified":1484111215887},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1484111215880},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1484111215881},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1484111215907},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1484111215908},{"_id":"themes/next/l.git/objects/pack/pack-00f07f1de24eae5e11a6eafe2ba682e19a17d816.idx","hash":"9d5dbc105ad16f3b5a38b696e32be0282b529cf3","modified":1484111214944},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1484111215891},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1484111215890},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1484111215900},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1484111215901},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1484111215912},{"_id":"themes/next/l.git/logs/refs/remotes/origin/HEAD","hash":"da94967662354bd711a2d1bdd9ca3cbb51260e49","modified":1484111215567},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1484111215800},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1484111215801},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1484111215801},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1484111215802},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1484111215802},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1484111215803},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"cd2def16d31feb234be27dcdce2a919f70cc6919","modified":1484111215803},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1484111215804},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1484111215805},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1484111215805},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1484111215805},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1484111215806},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1484111215806},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"0d9a4ae2e4ab418453e0f81b8fb1ad4b856f91d4","modified":1484111215808},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1484111215808},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1484111215809},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1484111215810},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1484111215809},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"05d84b80094eaff67a74eafed4d0706ca555b0a3","modified":1484115916457},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"74e9989a10fc682388cbd25ff7df0d7d4025fb8c","modified":1484111215810},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1484111215811},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1484111215811},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1484111215812},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1484111215812},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"00f557841cc7d5781c3b857ef410716655b2c612","modified":1484208437290},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1484111215814},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1484111215814},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1484111215815},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1484111215815},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1484111215816},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1484111215816},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1484111215816},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1484111215817},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1484111215817},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1484111215818},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1484111215819},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1484111215820},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1484111215820},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1484111215820},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1484111215821},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1484111215821},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2b22a0e517f9a44fa94029cc15e000b569b55f1d","modified":1484123580944},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1484111215822},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1484111215823},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1484111215823},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1484111215823},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1484111215824},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"bce044d5dfe97833cf503e13afcd3d11f5f32fa1","modified":1484116830065},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1484111215835},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1484111215835},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1484111215838},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1484111215870},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1484111215870},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1484111215872},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1484111215873},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1484111215873},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1484111215873},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1484111215899},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1484111215863},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1484111215896},{"_id":"themes/next/l.git/objects/pack/pack-00f07f1de24eae5e11a6eafe2ba682e19a17d816.pack","hash":"40c8757daa949da2de470b088593680ae25c22d1","modified":1484111215005},{"_id":"public/about/index.html","hash":"343b439bdb93623d6cacb2831fe8fc76f163ed27","modified":1485064949788},{"_id":"public/categories/index.html","hash":"b88abb3e48b192d501a53d9a3b7a935c7e38965f","modified":1485064949801},{"_id":"public/tags/index.html","hash":"4c89766a92b60f62a0eb15d9052f00acbd2dc558","modified":1485064949944},{"_id":"public/categories/JavaScript/index.html","hash":"e7b03e1d6372f4ac3251d39fd2fe0d9f5082431b","modified":1485064949947},{"_id":"public/archives/2016/index.html","hash":"8eef196a7af22c753f2bc2f05ce4717b8de96d32","modified":1485064949947},{"_id":"public/archives/2016/12/index.html","hash":"431092f0aabe659116e49b71a4b43545ddab5e3f","modified":1485064949947},{"_id":"public/tags/JavaScript/index.html","hash":"451319dd50e005f69ec4b8cdb10bdb713b5c53e0","modified":1485064949947},{"_id":"public/categories/hexo/index.html","hash":"5bef6cab0945e8792183a576a31f268ec7a7396e","modified":1485064949948},{"_id":"public/categories/工具/index.html","hash":"7a840f3d82c7e8e27ce88d073e1acdc57bd50964","modified":1485064949948},{"_id":"public/categories/HTML5/index.html","hash":"2f5bac8872f95dba589886ac605e82d8ab141f0c","modified":1485064949948},{"_id":"public/tags/素材资源/index.html","hash":"99dfd1756cb84f639ec96f83c607c69105f9aa4a","modified":1485064949948},{"_id":"public/tags/在线工具/index.html","hash":"b7dfeca94f7f583f83cc630ffd501264f211b193","modified":1485064949948},{"_id":"public/tags/Chrome插件/index.html","hash":"4cbaf1972d9b47a844cee47a856eafe351f7405c","modified":1485064949948},{"_id":"public/tags/时间管理/index.html","hash":"d6e8bbaea9a5b3d3afad169e28193b0efcb0c4bb","modified":1485064949949},{"_id":"public/tags/快乐的coding/index.html","hash":"680d3d1d731bdbbdc618b75ae8637b1f59b3abfb","modified":1485064949949},{"_id":"public/tags/读书/index.html","hash":"bcd83b3d2c0909852b10aef58fb0c9d109c447a4","modified":1485064949949},{"_id":"public/tags/hexo/index.html","hash":"74d4493056fa12c59e96a30e55f9660f411a9302","modified":1485064949949},{"_id":"public/tags/video/index.html","hash":"8f14ea1a6b753a0b182de7918054420d174e48db","modified":1485064949949},{"_id":"public/tags/HTML5/index.html","hash":"d356f9ae522aa48f97277008af38fb919c38eec4","modified":1485064949950},{"_id":"public/2017/01/18/高程笔记/index.html","hash":"c025774c0d0a41f6ebbad7d880aeb0accf894a97","modified":1485064949950},{"_id":"public/2017/01/15/video标签的属性和方法总结/index.html","hash":"4a55337a9452cf478228966907ea0734f9e1388c","modified":1485064949950},{"_id":"public/2017/01/12/工具集/index.html","hash":"da475d42ef396a45799830dd300a589b8ce586bd","modified":1485064949951},{"_id":"public/2016/12/28/hexo放到子目录并通过二级域名访问/index.html","hash":"37b0ef954b98921170fddcbd38c86b7d40adc741","modified":1485064949951},{"_id":"public/index.html","hash":"553b75319a03b654ec80737fa4d4a9c03c66e160","modified":1485064949951},{"_id":"public/archives/index.html","hash":"094b41c6550ae9e9317b64ccedddfb89ff62f927","modified":1485064949952},{"_id":"public/archives/2017/index.html","hash":"cea59782d782cbc660c87809c263c0b057b49019","modified":1485064949952},{"_id":"public/archives/2017/01/index.html","hash":"6f9018756e45473be31101803f3ca10e13c815a1","modified":1485064949952},{"_id":"public/tags/异步/index.html","hash":"1b6cd79c4ae0449898f17322883843a270ec3f1a","modified":1485064949954},{"_id":"public/2017/01/22/h/index.html","hash":"e0283835d622e8da761c798316f946179403d921","modified":1485064949954}],"Category":[{"name":"JavaScript","_id":"ciy89a39y00042kof041b4pxk"},{"name":"hexo","_id":"ciy89a3b5000a2kofwcxhm6ua"},{"name":"HTML5","_id":"ciy89a3bc000d2kofynhw8xmz"},{"name":"工具","_id":"ciy89a3bk000j2kof0rt7vez1"}],"Data":[],"Page":[{"title":"关于","date":"2017-01-11T06:49:13.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2017-01-11 14:49:13\n---\n","updated":"2017-01-11T07:08:00.444Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciy89a39200012kofd31uft1a","content":"","excerpt":"","more":""},{"title":"分类","date":"2017-01-11T06:50:14.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-01-11 14:50:14\ntype: \"categories\"\n---\n","updated":"2017-01-11T07:08:00.591Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciy89a39q00032koffywo0z58","content":"","excerpt":"","more":""},{"title":"标签","date":"2017-01-11T06:52:13.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-01-11 14:52:13\ntype: \"tags\"\n---\n","updated":"2017-01-11T07:07:23.413Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciy89a3an00072kofiyahad49","content":"","excerpt":"","more":""}],"Post":[{"title":"JavaScript异步编程","date":"2017-01-22T05:44:10.000Z","_content":"原来对于JavaScript**异步**、**阻塞**、**单线程**只是了解，最近学习算法，想实现排序可视化，才发现自己对这方便内容真的是一知半解。\n\n今天好好查了一下资料，放个阮一峰的链接，但是他没说全，结合本文，可以更好的理解，浏览器中异步的实现。\n> [Javascript异步编程的4种方法](http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html)\n\n### JavaScript是单线程的\n\n\"单线程\"，就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。\n\n<!-- more -->\n\n### 浏览器是多线程的\n浏览器是多线程的，诸如js引擎线程，定时器线程，HTTP请求线程，事件触发线程，js单线程是指只有一条js引擎线程来执行js，所以说无论某个时间js只能干一件事情。\n\n### 浏览器定时器\n当调用定时器的时候，浏览器会分配定时器线程来做这件事，什么事？就是在指定时间后将指定函数插入到任务队列的末尾！\n\n当js线程完成手上正在执行的任务后，就会将任务队列排在首位的任务读取并执行，如此往复。\n\n这也是为什么有些时候使用setTimeout但却不能在指定时间执行指定函数的原因，因为它前面还有其他任务在排队或者说js引擎线程当前的任务还没执行完毕，那就只能等着了。\n\n所以所谓的异步都是浏览器实现的。\n\n### 更多异步实现\n\n知道了上面的基础知识，再去看下面的内容，就觉得不那么神秘了。\n\n>> [Javascript异步编程的4种方法](http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html)","source":"_posts/h.md","raw":"---\ntitle: JavaScript异步编程\ndate: 2017-01-22 13:44:10\ncategories:\n- JavaScript\ntags: \n- 异步\n- JavaScript\n---\n原来对于JavaScript**异步**、**阻塞**、**单线程**只是了解，最近学习算法，想实现排序可视化，才发现自己对这方便内容真的是一知半解。\n\n今天好好查了一下资料，放个阮一峰的链接，但是他没说全，结合本文，可以更好的理解，浏览器中异步的实现。\n> [Javascript异步编程的4种方法](http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html)\n\n### JavaScript是单线程的\n\n\"单线程\"，就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。\n\n<!-- more -->\n\n### 浏览器是多线程的\n浏览器是多线程的，诸如js引擎线程，定时器线程，HTTP请求线程，事件触发线程，js单线程是指只有一条js引擎线程来执行js，所以说无论某个时间js只能干一件事情。\n\n### 浏览器定时器\n当调用定时器的时候，浏览器会分配定时器线程来做这件事，什么事？就是在指定时间后将指定函数插入到任务队列的末尾！\n\n当js线程完成手上正在执行的任务后，就会将任务队列排在首位的任务读取并执行，如此往复。\n\n这也是为什么有些时候使用setTimeout但却不能在指定时间执行指定函数的原因，因为它前面还有其他任务在排队或者说js引擎线程当前的任务还没执行完毕，那就只能等着了。\n\n所以所谓的异步都是浏览器实现的。\n\n### 更多异步实现\n\n知道了上面的基础知识，再去看下面的内容，就觉得不那么神秘了。\n\n>> [Javascript异步编程的4种方法](http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html)","slug":"h","published":1,"updated":"2017-01-22T06:01:00.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy89a38o00002kofxjrpn4j5","content":"<p>原来对于JavaScript<strong>异步</strong>、<strong>阻塞</strong>、<strong>单线程</strong>只是了解，最近学习算法，想实现排序可视化，才发现自己对这方便内容真的是一知半解。</p>\n<p>今天好好查了一下资料，放个阮一峰的链接，但是他没说全，结合本文，可以更好的理解，浏览器中异步的实现。</p>\n<blockquote>\n<p><a href=\"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html\" target=\"_blank\" rel=\"external\">Javascript异步编程的4种方法</a></p>\n</blockquote>\n<h3 id=\"JavaScript是单线程的\"><a href=\"#JavaScript是单线程的\" class=\"headerlink\" title=\"JavaScript是单线程的\"></a>JavaScript是单线程的</h3><p>“单线程”，就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。</p>\n<a id=\"more\"></a>\n<h3 id=\"浏览器是多线程的\"><a href=\"#浏览器是多线程的\" class=\"headerlink\" title=\"浏览器是多线程的\"></a>浏览器是多线程的</h3><p>浏览器是多线程的，诸如js引擎线程，定时器线程，HTTP请求线程，事件触发线程，js单线程是指只有一条js引擎线程来执行js，所以说无论某个时间js只能干一件事情。</p>\n<h3 id=\"浏览器定时器\"><a href=\"#浏览器定时器\" class=\"headerlink\" title=\"浏览器定时器\"></a>浏览器定时器</h3><p>当调用定时器的时候，浏览器会分配定时器线程来做这件事，什么事？就是在指定时间后将指定函数插入到任务队列的末尾！</p>\n<p>当js线程完成手上正在执行的任务后，就会将任务队列排在首位的任务读取并执行，如此往复。</p>\n<p>这也是为什么有些时候使用setTimeout但却不能在指定时间执行指定函数的原因，因为它前面还有其他任务在排队或者说js引擎线程当前的任务还没执行完毕，那就只能等着了。</p>\n<p>所以所谓的异步都是浏览器实现的。</p>\n<h3 id=\"更多异步实现\"><a href=\"#更多异步实现\" class=\"headerlink\" title=\"更多异步实现\"></a>更多异步实现</h3><p>知道了上面的基础知识，再去看下面的内容，就觉得不那么神秘了。</p>\n<blockquote>\n<blockquote>\n<p><a href=\"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html\" target=\"_blank\" rel=\"external\">Javascript异步编程的4种方法</a></p>\n</blockquote>\n</blockquote>\n","excerpt":"<p>原来对于JavaScript<strong>异步</strong>、<strong>阻塞</strong>、<strong>单线程</strong>只是了解，最近学习算法，想实现排序可视化，才发现自己对这方便内容真的是一知半解。</p>\n<p>今天好好查了一下资料，放个阮一峰的链接，但是他没说全，结合本文，可以更好的理解，浏览器中异步的实现。</p>\n<blockquote>\n<p><a href=\"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html\">Javascript异步编程的4种方法</a></p>\n</blockquote>\n<h3 id=\"JavaScript是单线程的\"><a href=\"#JavaScript是单线程的\" class=\"headerlink\" title=\"JavaScript是单线程的\"></a>JavaScript是单线程的</h3><p>“单线程”，就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。</p>","more":"<h3 id=\"浏览器是多线程的\"><a href=\"#浏览器是多线程的\" class=\"headerlink\" title=\"浏览器是多线程的\"></a>浏览器是多线程的</h3><p>浏览器是多线程的，诸如js引擎线程，定时器线程，HTTP请求线程，事件触发线程，js单线程是指只有一条js引擎线程来执行js，所以说无论某个时间js只能干一件事情。</p>\n<h3 id=\"浏览器定时器\"><a href=\"#浏览器定时器\" class=\"headerlink\" title=\"浏览器定时器\"></a>浏览器定时器</h3><p>当调用定时器的时候，浏览器会分配定时器线程来做这件事，什么事？就是在指定时间后将指定函数插入到任务队列的末尾！</p>\n<p>当js线程完成手上正在执行的任务后，就会将任务队列排在首位的任务读取并执行，如此往复。</p>\n<p>这也是为什么有些时候使用setTimeout但却不能在指定时间执行指定函数的原因，因为它前面还有其他任务在排队或者说js引擎线程当前的任务还没执行完毕，那就只能等着了。</p>\n<p>所以所谓的异步都是浏览器实现的。</p>\n<h3 id=\"更多异步实现\"><a href=\"#更多异步实现\" class=\"headerlink\" title=\"更多异步实现\"></a>更多异步实现</h3><p>知道了上面的基础知识，再去看下面的内容，就觉得不那么神秘了。</p>\n<blockquote>\n<blockquote>\n<p><a href=\"http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html\">Javascript异步编程的4种方法</a></p>\n</blockquote>\n</blockquote>"},{"title":"hexo使用、二级域名访问及多终端编辑","date":"2016-12-27T18:09:31.000Z","_content":"### hexo部署\n先说一下，如果你GitHub主页原来是有项目的，那千万别直接`hexo d -g`到你的主页所在项目里。\n\n**千万别！千万别！千万别！**\n<!-- more -->\n因为hexo部署是`git push --force`强制提交的，会覆盖掉你原来的项目，包括提交记录，如果你本地仓库也没有了，那是很绝望的。别问我怎么知道的（还好我本地仓库完好，又`git push --force`回去了。\n\n### Next主题\n无论是hexo还是我使用的主题Next的文档都很详尽，特别是Next的文档，所以虽然会踩一些坑，但是也能很快搭建起来。除了有些CSS样式错误，直接在Chrome调试工具定位CSS文件，都能自己改一下。所以直接看文档，有问题也可以留言给我\n\n### 二级域名访问\n我的GitHub主页已经有很多demo页面，我又不想在动这些demo，所以我用hexo的时候想在根项目下建立一个blog目录用于存放博客的静态页面。google了一下发现这样就只能手动`push`public目录到blog。后来发现可以新建一个项目并通过`blog.strongfanfan.top`这种二级域名访问，是不是比`www.strongfanfan.top/blog`逼格稍微高一点。下面我就来说说是怎么实现的。\n#### 1. 个人主页和项目主页\n\n个人主页只能有一个，而项目主页可以有很多个\n\n你的每个项目Settings\\>GitHub Pages\\>Source默认选项是`none`，改为`master branch`，点击`save`就可以通过`yourName.github.com/repoName`访问。\n#### 2. CNAME文件\n   \n   在你的项目根目录下创建CNAME文件，没有文件后缀。内容写上你的二级域名，不带协议，即`http://`，比如我的内容就是`blog.strongfanfan.top`，因为deploy部署可能会删除这个文件，所以最好放在hexo根目录下source文件夹下。\n #### 3. DNS解析\n   \n   最后就是给你的一级域名解析添加一行`CNAME`记录，主机记录为你想要的二级域名字段，比如我的是`blog`，记录值就是你的GitHub主页，比如`strongfanfan.github.io`，保存以后等几分钟就可以通过你的二级域名直接访问你的博客了\n\n---------------------------------------------------\n  \n### Front-matter\n最后贴一些日常写作可能用到的Front-matter，方便以后查找。\n> #### md模板预定义参数\n\n> |参数|描述|默认值|\n>|:---:|:---:|:---:|\n>|  layout|\t布局||\t\n>|title|\t标题||\t\n>|date|\t建立日期|\t文件建立日期\n>|updated\t|更新日期\t|文件更新日期\n>|comments|\t开启文章的评论功能|\ttrue\n>|tags|\t标签（不适用于分页）||\t\n>|categories|\t分类（不适用于分页）||\t\n>|permalink|\t覆盖文章网址| .|\t\n\n>  #### 分类和标签\n\n >只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。\n```md\ncategories:\n- Diary\ntags:\n- PS3\n- Games\n```\n\n--------------------\n更新于2017/1/12\n\n### 多终端编辑\n\n新建一个项目或者在blog项目下新建分支，用于存放博客源码，每次部署完博客网页，`push`一下源码到分支，在公司电脑或者新机器上`clone`下来，执行`npm install`命令就可以同步编辑部署了。\n下次就直接`pull`一下远程仓库的版本就可以了。","source":"_posts/hexo放到子目录并通过二级域名访问.md","raw":"---\ntitle: hexo使用、二级域名访问及多终端编辑\ndate: 2016-12-28 02:09:31\ncategories:\n- hexo\ntags: \n- hexo \n---\n### hexo部署\n先说一下，如果你GitHub主页原来是有项目的，那千万别直接`hexo d -g`到你的主页所在项目里。\n\n**千万别！千万别！千万别！**\n<!-- more -->\n因为hexo部署是`git push --force`强制提交的，会覆盖掉你原来的项目，包括提交记录，如果你本地仓库也没有了，那是很绝望的。别问我怎么知道的（还好我本地仓库完好，又`git push --force`回去了。\n\n### Next主题\n无论是hexo还是我使用的主题Next的文档都很详尽，特别是Next的文档，所以虽然会踩一些坑，但是也能很快搭建起来。除了有些CSS样式错误，直接在Chrome调试工具定位CSS文件，都能自己改一下。所以直接看文档，有问题也可以留言给我\n\n### 二级域名访问\n我的GitHub主页已经有很多demo页面，我又不想在动这些demo，所以我用hexo的时候想在根项目下建立一个blog目录用于存放博客的静态页面。google了一下发现这样就只能手动`push`public目录到blog。后来发现可以新建一个项目并通过`blog.strongfanfan.top`这种二级域名访问，是不是比`www.strongfanfan.top/blog`逼格稍微高一点。下面我就来说说是怎么实现的。\n#### 1. 个人主页和项目主页\n\n个人主页只能有一个，而项目主页可以有很多个\n\n你的每个项目Settings\\>GitHub Pages\\>Source默认选项是`none`，改为`master branch`，点击`save`就可以通过`yourName.github.com/repoName`访问。\n#### 2. CNAME文件\n   \n   在你的项目根目录下创建CNAME文件，没有文件后缀。内容写上你的二级域名，不带协议，即`http://`，比如我的内容就是`blog.strongfanfan.top`，因为deploy部署可能会删除这个文件，所以最好放在hexo根目录下source文件夹下。\n #### 3. DNS解析\n   \n   最后就是给你的一级域名解析添加一行`CNAME`记录，主机记录为你想要的二级域名字段，比如我的是`blog`，记录值就是你的GitHub主页，比如`strongfanfan.github.io`，保存以后等几分钟就可以通过你的二级域名直接访问你的博客了\n\n---------------------------------------------------\n  \n### Front-matter\n最后贴一些日常写作可能用到的Front-matter，方便以后查找。\n> #### md模板预定义参数\n\n> |参数|描述|默认值|\n>|:---:|:---:|:---:|\n>|  layout|\t布局||\t\n>|title|\t标题||\t\n>|date|\t建立日期|\t文件建立日期\n>|updated\t|更新日期\t|文件更新日期\n>|comments|\t开启文章的评论功能|\ttrue\n>|tags|\t标签（不适用于分页）||\t\n>|categories|\t分类（不适用于分页）||\t\n>|permalink|\t覆盖文章网址| .|\t\n\n>  #### 分类和标签\n\n >只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。\n```md\ncategories:\n- Diary\ntags:\n- PS3\n- Games\n```\n\n--------------------\n更新于2017/1/12\n\n### 多终端编辑\n\n新建一个项目或者在blog项目下新建分支，用于存放博客源码，每次部署完博客网页，`push`一下源码到分支，在公司电脑或者新机器上`clone`下来，执行`npm install`命令就可以同步编辑部署了。\n下次就直接`pull`一下远程仓库的版本就可以了。","slug":"hexo放到子目录并通过二级域名访问","published":1,"updated":"2017-01-12T09:28:59.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy89a39k00022kofabq0h4ed","content":"<h3 id=\"hexo部署\"><a href=\"#hexo部署\" class=\"headerlink\" title=\"hexo部署\"></a>hexo部署</h3><p>先说一下，如果你GitHub主页原来是有项目的，那千万别直接<code>hexo d -g</code>到你的主页所在项目里。</p>\n<p><strong>千万别！千万别！千万别！</strong><br><a id=\"more\"></a><br>因为hexo部署是<code>git push --force</code>强制提交的，会覆盖掉你原来的项目，包括提交记录，如果你本地仓库也没有了，那是很绝望的。别问我怎么知道的（还好我本地仓库完好，又<code>git push --force</code>回去了。</p>\n<h3 id=\"Next主题\"><a href=\"#Next主题\" class=\"headerlink\" title=\"Next主题\"></a>Next主题</h3><p>无论是hexo还是我使用的主题Next的文档都很详尽，特别是Next的文档，所以虽然会踩一些坑，但是也能很快搭建起来。除了有些CSS样式错误，直接在Chrome调试工具定位CSS文件，都能自己改一下。所以直接看文档，有问题也可以留言给我</p>\n<h3 id=\"二级域名访问\"><a href=\"#二级域名访问\" class=\"headerlink\" title=\"二级域名访问\"></a>二级域名访问</h3><p>我的GitHub主页已经有很多demo页面，我又不想在动这些demo，所以我用hexo的时候想在根项目下建立一个blog目录用于存放博客的静态页面。google了一下发现这样就只能手动<code>push</code>public目录到blog。后来发现可以新建一个项目并通过<code>blog.strongfanfan.top</code>这种二级域名访问，是不是比<code>www.strongfanfan.top/blog</code>逼格稍微高一点。下面我就来说说是怎么实现的。</p>\n<h4 id=\"1-个人主页和项目主页\"><a href=\"#1-个人主页和项目主页\" class=\"headerlink\" title=\"1. 个人主页和项目主页\"></a>1. 个人主页和项目主页</h4><p>个人主页只能有一个，而项目主页可以有很多个</p>\n<p>你的每个项目Settings>GitHub Pages>Source默认选项是<code>none</code>，改为<code>master branch</code>，点击<code>save</code>就可以通过<code>yourName.github.com/repoName</code>访问。</p>\n<h4 id=\"2-CNAME文件\"><a href=\"#2-CNAME文件\" class=\"headerlink\" title=\"2. CNAME文件\"></a>2. CNAME文件</h4><p>   在你的项目根目录下创建CNAME文件，没有文件后缀。内容写上你的二级域名，不带协议，即<code>http://</code>，比如我的内容就是<code>blog.strongfanfan.top</code>，因为deploy部署可能会删除这个文件，所以最好放在hexo根目录下source文件夹下。</p>\n<h4 id=\"3-DNS解析\"><a href=\"#3-DNS解析\" class=\"headerlink\" title=\"3. DNS解析\"></a>3. DNS解析</h4><p>   最后就是给你的一级域名解析添加一行<code>CNAME</code>记录，主机记录为你想要的二级域名字段，比如我的是<code>blog</code>，记录值就是你的GitHub主页，比如<code>strongfanfan.github.io</code>，保存以后等几分钟就可以通过你的二级域名直接访问你的博客了</p>\n<hr>\n<h3 id=\"Front-matter\"><a href=\"#Front-matter\" class=\"headerlink\" title=\"Front-matter\"></a>Front-matter</h3><p>最后贴一些日常写作可能用到的Front-matter，方便以后查找。</p>\n<blockquote>\n<h4 id=\"md模板预定义参数\"><a href=\"#md模板预定义参数\" class=\"headerlink\" title=\"md模板预定义参数\"></a>md模板预定义参数</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">layout</td>\n<td style=\"text-align:center\">布局</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">title</td>\n<td style=\"text-align:center\">标题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">date</td>\n<td style=\"text-align:center\">建立日期</td>\n<td style=\"text-align:center\">文件建立日期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updated</td>\n<td style=\"text-align:center\">更新日期</td>\n<td style=\"text-align:center\">文件更新日期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">comments</td>\n<td style=\"text-align:center\">开启文章的评论功能</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tags</td>\n<td style=\"text-align:center\">标签（不适用于分页）</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">categories</td>\n<td style=\"text-align:center\">分类（不适用于分页）</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">permalink</td>\n<td style=\"text-align:center\">覆盖文章网址</td>\n<td style=\"text-align:center\">.</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"分类和标签\"><a href=\"#分类和标签\" class=\"headerlink\" title=\"分类和标签\"></a>分类和标签</h4><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。<br><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">categories:</div><div class=\"line\"><span class=\"bullet\">- </span>Diary</div><div class=\"line\">tags:</div><div class=\"line\"><span class=\"bullet\">- </span>PS3</div><div class=\"line\"><span class=\"bullet\">- </span>Games</div></pre></td></tr></table></figure></p>\n</blockquote>\n<hr>\n<p>更新于2017/1/12</p>\n<h3 id=\"多终端编辑\"><a href=\"#多终端编辑\" class=\"headerlink\" title=\"多终端编辑\"></a>多终端编辑</h3><p>新建一个项目或者在blog项目下新建分支，用于存放博客源码，每次部署完博客网页，<code>push</code>一下源码到分支，在公司电脑或者新机器上<code>clone</code>下来，执行<code>npm install</code>命令就可以同步编辑部署了。<br>下次就直接<code>pull</code>一下远程仓库的版本就可以了。</p>\n","excerpt":"<h3 id=\"hexo部署\"><a href=\"#hexo部署\" class=\"headerlink\" title=\"hexo部署\"></a>hexo部署</h3><p>先说一下，如果你GitHub主页原来是有项目的，那千万别直接<code>hexo d -g</code>到你的主页所在项目里。</p>\n<p><strong>千万别！千万别！千万别！</strong><br>","more":"<br>因为hexo部署是<code>git push --force</code>强制提交的，会覆盖掉你原来的项目，包括提交记录，如果你本地仓库也没有了，那是很绝望的。别问我怎么知道的（还好我本地仓库完好，又<code>git push --force</code>回去了。</p>\n<h3 id=\"Next主题\"><a href=\"#Next主题\" class=\"headerlink\" title=\"Next主题\"></a>Next主题</h3><p>无论是hexo还是我使用的主题Next的文档都很详尽，特别是Next的文档，所以虽然会踩一些坑，但是也能很快搭建起来。除了有些CSS样式错误，直接在Chrome调试工具定位CSS文件，都能自己改一下。所以直接看文档，有问题也可以留言给我</p>\n<h3 id=\"二级域名访问\"><a href=\"#二级域名访问\" class=\"headerlink\" title=\"二级域名访问\"></a>二级域名访问</h3><p>我的GitHub主页已经有很多demo页面，我又不想在动这些demo，所以我用hexo的时候想在根项目下建立一个blog目录用于存放博客的静态页面。google了一下发现这样就只能手动<code>push</code>public目录到blog。后来发现可以新建一个项目并通过<code>blog.strongfanfan.top</code>这种二级域名访问，是不是比<code>www.strongfanfan.top/blog</code>逼格稍微高一点。下面我就来说说是怎么实现的。</p>\n<h4 id=\"1-个人主页和项目主页\"><a href=\"#1-个人主页和项目主页\" class=\"headerlink\" title=\"1. 个人主页和项目主页\"></a>1. 个人主页和项目主页</h4><p>个人主页只能有一个，而项目主页可以有很多个</p>\n<p>你的每个项目Settings>GitHub Pages>Source默认选项是<code>none</code>，改为<code>master branch</code>，点击<code>save</code>就可以通过<code>yourName.github.com/repoName</code>访问。</p>\n<h4 id=\"2-CNAME文件\"><a href=\"#2-CNAME文件\" class=\"headerlink\" title=\"2. CNAME文件\"></a>2. CNAME文件</h4><p>   在你的项目根目录下创建CNAME文件，没有文件后缀。内容写上你的二级域名，不带协议，即<code>http://</code>，比如我的内容就是<code>blog.strongfanfan.top</code>，因为deploy部署可能会删除这个文件，所以最好放在hexo根目录下source文件夹下。</p>\n<h4 id=\"3-DNS解析\"><a href=\"#3-DNS解析\" class=\"headerlink\" title=\"3. DNS解析\"></a>3. DNS解析</h4><p>   最后就是给你的一级域名解析添加一行<code>CNAME</code>记录，主机记录为你想要的二级域名字段，比如我的是<code>blog</code>，记录值就是你的GitHub主页，比如<code>strongfanfan.github.io</code>，保存以后等几分钟就可以通过你的二级域名直接访问你的博客了</p>\n<hr>\n<h3 id=\"Front-matter\"><a href=\"#Front-matter\" class=\"headerlink\" title=\"Front-matter\"></a>Front-matter</h3><p>最后贴一些日常写作可能用到的Front-matter，方便以后查找。</p>\n<blockquote>\n<h4 id=\"md模板预定义参数\"><a href=\"#md模板预定义参数\" class=\"headerlink\" title=\"md模板预定义参数\"></a>md模板预定义参数</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">layout</td>\n<td style=\"text-align:center\">布局</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">title</td>\n<td style=\"text-align:center\">标题</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">date</td>\n<td style=\"text-align:center\">建立日期</td>\n<td style=\"text-align:center\">文件建立日期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">updated</td>\n<td style=\"text-align:center\">更新日期</td>\n<td style=\"text-align:center\">文件更新日期</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">comments</td>\n<td style=\"text-align:center\">开启文章的评论功能</td>\n<td style=\"text-align:center\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tags</td>\n<td style=\"text-align:center\">标签（不适用于分页）</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">categories</td>\n<td style=\"text-align:center\">分类（不适用于分页）</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">permalink</td>\n<td style=\"text-align:center\">覆盖文章网址</td>\n<td style=\"text-align:center\">.</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"分类和标签\"><a href=\"#分类和标签\" class=\"headerlink\" title=\"分类和标签\"></a>分类和标签</h4><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。<br><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">categories:</div><div class=\"line\"><span class=\"bullet\">- </span>Diary</div><div class=\"line\">tags:</div><div class=\"line\"><span class=\"bullet\">- </span>PS3</div><div class=\"line\"><span class=\"bullet\">- </span>Games</div></pre></td></tr></table></figure></p>\n</blockquote>\n<hr>\n<p>更新于2017/1/12</p>\n<h3 id=\"多终端编辑\"><a href=\"#多终端编辑\" class=\"headerlink\" title=\"多终端编辑\"></a>多终端编辑</h3><p>新建一个项目或者在blog项目下新建分支，用于存放博客源码，每次部署完博客网页，<code>push</code>一下源码到分支，在公司电脑或者新机器上<code>clone</code>下来，执行<code>npm install</code>命令就可以同步编辑部署了。<br>下次就直接<code>pull</code>一下远程仓库的版本就可以了。</p>"},{"title":"video标签的属性和方法总结","date":"2017-01-15T09:54:34.000Z","_content":"最近想做一个弹幕插件，查了很多video标签的属性和方法\n\n### error属性\n\n   在正常读取时候，使用媒体数据的过程中，video元素或audio元素的error属性为null，但是任何时候只要出现错误，error属性将返回一个MediaError对象，该对象的code返回对应的错误状态，共有4个可能值：\n   \n* `MEDIA_ERR_ABORTED(数字值为1)`，媒体数据的下载过程由于用户的操作原因而被终止。\n- `MEDIA_ERR_NETWORK(数字值为2)`，确认媒体资源可用，但是在下载出现网络错误，媒体数据的下载过程被中止。\n<!-- more -->\n\n- `MEDIA_ERR_DECODE(数字值为3)`，确认媒体资源可用，但是解码时发生错误。\n- `MEDIA_ERR_SRC_NOT_SUPPORTED(数字值为4)`，媒体资源不可用或媒体格式不被支持。\n代码如下：\n```js\n<video src=\"\" id=\"videoElement\"></video>\n var video = document.getElementById(\"videoElement\");\n video.addEventListener(\"error\",function(){\n     var error = video.error;\n     swicth(error.code) {\n         case 1:\n            alert(\"视频的下载过程被中止\");\n         break;\n \n         case 2:\n            alert(\"网络发生故障，视频的下载过程被中止\");\n         break;\n \n         case 3:\n            alert(\"解码失败\");\n         break;\n \n         case 4:\n            alert(\"媒体资源不可用或媒体格式不被支持\");\n         break; \n \n     }\n },false);\n```\n### networkState属性\n\n在媒体数据加载过程中可以使用video元素或audio元素的networkState属性读取当前网络状态，共有4个可能的值；\n1．  NETWORK_EMPTY（数字值为0）：元素处于初始状态。\n2．  NETWORK_IDLE(数字值为1)，浏览器已选择好用什么编码格式来播放媒体，但是尚未建立网络连接。\n3．  NETWORK_LOADING(数字值为2)：媒体数据加载中\n4．  NETWORK_NO_SOURCE(数字值为3)，没有支持的编码格式，不执行加载。\n### currentTime属性与duration属性\n\nvideo元素或audio元素的currentTime属性来读取媒体的当前播放位置(单位是s)，也可以通过修改currentTime属性来修改当前播放位置，如果修改的位置上没有可用的媒体数据时，将抛出INVALID_STATE_ERR异常；\nvideo元素或audio元素的duration属性来读取媒体文件总的播放时间。\n我们可以来做demo如下：\nHTML代码如下：\n\n```html\n<video id=\"video\" controls width=640 height=360 autoplay>\n    <source src=\"Wildlife/Wildlife.ogv\" type=\"video/ogg; codecs=\"theora, vorbis\"\"/>\n    <source src=\"Wildlife/Wildlife.webm\" type=\"video/webm\" >\n    <source src=\"Wildlife/Wildlife.mp4\" type=\"video/mp4\">\n    <p>Video is not visible, most likely your browser does not support HTML5 video</p>\n</video>\n<button onclick=\"getCurTime()\" type=\"button\">获得当前时间的位置</button>\n<button onclick=\"setCurTime()\" type=\"button\">把时间位置设置为 5 秒</button>\n<button onclick=\"duration()\" type=\"button\">读取媒体文件总的播放时间</button>\n```\n \nJS代码如下：\n```js\nvar myVid=document.getElementById(\"video\");\nfunction getCurTime(){ \n    // 获得当前视频或者音频时间的位置\n    alert(myVid.currentTime);   \n} \nfunction setCurTime(){ \n// 给当前的视频或者音频设置5s时间的位置\n    myVid.currentTime=5;        \n} \nfunction duration() {\n    //读取媒体文件总的播放时间 单位为S\n    alert(myVid.duration); \n}\n```\n大家可以复制代码，换一张视频地址就可以看到效果了~；\n\n### played属性，paused属性与ended属性\n- played：video元素或audio元素的played属性来返回一个TimeRanges对象，从该对象中可以读取媒体文件的已播放部分的时间段。开始时间为已播放部分的开始时间，结束时间为已播放部分的结束时间。\n- paused属性：使用video元素或audio元素的paused属性来返回一个布尔值，表示是否处于暂停播放中，true表示媒体暂停播放，false表示媒体正在播放；\n- ended属性：使用video元素或audio元素的ended属性来返回一个布尔值，表示是否播放完毕，true表示媒体播放完毕，false表示媒体还没有播放完毕。\nHTML代码如下：\n```html\n    <video id=\"video\" controls width=640 height=360 autoplay loop>\n    <source src=\"Wildlife/Wildlife.ogv\" type=\"video/ogg; codecs=\"theora, vorbis\"\"/>\n    <source src=\"Wildlife/Wildlife.webm\" type=\"video/webm\" >\n    <source src=\"Wildlife/Wildlife.mp4\" type=\"video/mp4\">\n    <p>Video is not visible, most likely your browser does not support HTML5 video</p>\n    </video>\n    <button onclick=\"played()\" type=\"button\">读取媒体文件的已播放部分的时间段</button>\n    <button onclick=\"paused()\" type=\"button\">是否处于暂停播放</button>\n    <button onclick=\"ended()\" type=\"button\">是否播放完毕</button>\n```\n\nJS代码如下：\n```js\nvar myVid=document.getElementById(\"video\");\nfunction played() {\n    //读取媒体文件的已播放部分的时间段\n    console.log(myVid.played);\n}\nfunction paused() {\n    // 是否处于暂停播放\n    alert(myVid.paused);\n}\nfunction ended() {\n    // 是否播放完毕\n    alert(myVid.ended);\n}\n\n```\n### defaultPlaybackRate属性与playbackRate属性\n- defaultPlaybackRate属性：可以使用video元素或者audio元素的defaultPlaybackRate属性读取或修改媒体默认的播放速率。\n- playbackRate属性：可以使用video元素或者audio元素的playbackRate属性读取或修改媒体当前的播放速率。\n### volume属性与muted属性\n- volume属性：使用video元素或audio元素的volume属性读取或修改媒体的播放音量，范围为0到1,0为静音，1为最大音量。\n- muted属性：使用video元素或audio元素的muted属性读取或修改媒体的静音状态，该值为布尔值，true表示处于静音状态，false表示处于非静音状态。\nHTML代码如下：\n```html\n<video id=\"video\" controls width=640 height=360 autoplay loop>\n    <source src=\"Wildlife/Wildlife.ogv\" type=\"video/ogg; codecs=\"theora, vorbis\"\"/>\n    <source src=\"Wildlife/Wildlife.webm\" type=\"video/webm\" >\n    <source src=\"Wildlife/Wildlife.mp4\" type=\"video/mp4\">\n    <p>Video is not visible, most likely your browser does not support HTML5 video</p>\n</video>\n<button onclick=\"volume()\" type=\"button\">读取或修改媒体的播放音量</button>\n<button onclick=\"muted()\" type=\"button\">读取或修改媒体当前的静音状态</button>\n```\n\nJS代码如下：\n```js\nvar myVid=document.getElementById(\"video\");\nfunction volume(){\n    // 读取或修改媒体的播放音量\n    myVid.volume = 0.1;\n}\nfunction muted() {\n    //读取或修改媒体当前的静音状态\n    myVid.muted = true;\n}\n```\n大家可以使用下，当我点击”读取或修改媒体的播放音量”按钮时候，声音会变的很小，当我点击”读取或修改媒体当前的静音状态”按钮时候，视频完全就没有声音。\n###方法\nvideo元素与audio元素有以下四种方法；\n- play方法：使用play方法来播放媒体，自动将元素的paused属性的值变为false。\n- pause方法：使用pause方法来暂停播放，自动将元素的paused属性的值变为true。\n- load方法，使用load方法来重新载入媒体进行播放，自动将元素的playbackRate属性的值变为defaultPlaybackRate属性的值，自动将元素的error的值变为null。\n下面是播放和暂停的demo如下：\n```html\n<video id=\"video\" controls width=640 height=360>\n    <source src=\"Wildlife/Wildlife.ogv\" type=\"video/ogg; codecs=\"theora, vorbis\"\"/>\n    <source src=\"Wildlife/Wildlife.webm\" type=\"video/webm\" >\n    <source src=\"Wildlife/Wildlife.mp4\" type=\"video/mp4\">\n    <p>Video is not visible, most likely your browser does not support HTML5 video</p>\n</video>\n<button onclick=\"play()\">播放</button>\n<button onclick=\"pause()\">暂停</button>\n```\nJS代码如下：\n```js\nvar myVid=document.getElementById(\"video\");\n// 监听视频播放结束的事件\nmyVid.addEventListener(\"ended\",function(){\n    alert(\"播放结束\");\n},true);\n// 发生错误\nmyVid.addEventListener(\"error\",function(){\n    switch(myVid.error.code) {\n        case 1: \n          alert(\"视频的下载过程被中止\");\n        break;\n\n        case 2:\n              alert(\"网络发生故障，视频的下载过程被中止\");\n        break;\n\n        case 3:\n              alert(\"解码失败\");\n        break;\n\n        case 4:\n              alert(\"不支持播放的视频格式\");\n        break;\n\n        default:\n              alert(\"发生未知错误\");\n        }\n},false);\n\nfunction play() {\n    // 播放视频\n    myVid.play();\n}\nfunction pause() {\n    // 暂停播放\n    myVid.pause();\n}\n```\n>如上代码，默认的情况下是不自动播放，当我点击播放按钮时候，就播放，当我点击暂停按钮时候就停止当前的播放。\n- canPlayType方法：\n使用canPlayType方法来测试浏览器是否支持指定的媒体类型，该方法定义如下：\n`var support = videoElement.canPlayType(type);`\nvideoElement表示页面上的video元素或audio元素，该方法使用一个参数type，该参数的指定方法与source元素的type参数的指定方法相同，用播放文件的MIME类型来指定，可以在指定的字符串中加上表示媒体编码格式的codes参数。\n该方法可能返回的值如下所示：\n1. 空字符串：表示浏览器不支持此种媒体类型。\n2. maybe: 表示浏览器可能支持此种媒体类型。\n3. probably： 表示浏览器确定支持此种媒体类型。\nHTML代码如下：\n```html\n<video id=\"video\" controls width=640 height=360>\n    <source src=\"Wildlife/Wildlife.ogv\" type=\"video/ogg; codecs=\"theora, vorbis\"\"/>\n    <source src=\"Wildlife/Wildlife.webm\" type=\"video/webm\" >\n    <source src=\"Wildlife/Wildlife.mp4\" type=\"video/mp4\">\n    <p>Video is not visible, most likely your browser does not support HTML5 video</p>\n</video>\n<button onclick=\"canPlayType()\">canPlayType方法</button>\n```\n\nJS代码如下：\n```js\nvar myVid=document.getElementById(\"video\");\nfunction canPlayType() {\n    var support = myVid.canPlayType(\"video/webm\");\n    console.log(support); // maybe\n\n    var support = myVid.canPlayType(\"video/ogg; codecs=\"theora, vorbis\");\n    console.log(support); // probably\n}\n```\n### 事件\n1. 事件处理方式\n\n使用video元素或audio元素的事件方式有2种，第一种是监听的方式，使用video元素或audio元素的addEventListener方法来对事件的发生进行监听，该方法定义如下：\n`videoElement.addEventListener(type,listener,userCapture);`\n\n如上的监听方式和我们的JS的监听的方式一样，不做详细介绍，我们来看看第二种事件监听方式是为javascript脚本中常见的获取事件句柄的方式，如下所示：\n```js\n<video id=”” src=””  onplay=”begin()”></video>\nfunction begin(){}\n```\n\n| 事件   |  描述   |\n| :---: | :---: |\n|   loadstart\t  |    浏览器开始在网上寻找媒体数据   |\n|progress| 浏览器正在获取媒体数据|\n| suspend|\t 浏览器暂停获取媒体数据，但是下载过程中并没有正常结束|\n |abort\t| 浏览器在下载完全部媒体数据之前中止获取媒体数据，但是并不是由错误引起的|\n |error|\t 获取媒体数据过程中出错|\n |emptied|\t 暂不考虑，可以网上看|\n |stalled|\t 浏览器尝试获取媒体数据失败|\n |play\t| 即将开始播放，当执行了play方法时触发，或数据下载后元素被设为autoplay|\n |pause\t| 播放暂停，当执行了pause方法触发|\n |loadedmetadata|\t 浏览器获取完媒体的时长和字节数|\n |loadeddata\t| 浏览器已加载完毕当前播放位置的媒体数据，准备播放|\n |waiting|\t 可以暂不看|\n |playing|\t 正在播放|\n |canplay|\t 浏览器能够播放媒体，但估计以当前播放速率不能直接将媒体播完，播放期间需要缓冲|\n |canplaythrough|\t 浏览器能够播放媒体，但估计以当前播放速率能将媒体播完，不再需要缓冲|\n |seeking|\t Seeking变为true，表示浏览器正在请求数据|\n |seeked|\t Seeking属性变为false，表面浏览器停止请求数据|\n |timeupdate|\t 当前播放位置发生改变，可能是播放过程中的自然改变，也可能是人为改变，或由于播放不能连续而发生的跳变。|\n |ended|\t 播放结束后停止播放|\n |ratechange\t| DefaultplaybackRate属性或playbackRate属性发生改变|\n |durationchange|\t 播放时长发生改变|\n |volumechange|\t volume属性或muted属性发生改变|\n \t \n","source":"_posts/video标签的属性和方法总结.md","raw":"---\ntitle: video标签的属性和方法总结\ndate: 2017-01-15 17:54:34\ncategories:\n- HTML5\n\ntags:\n- video\n- HTML5\n---\n最近想做一个弹幕插件，查了很多video标签的属性和方法\n\n### error属性\n\n   在正常读取时候，使用媒体数据的过程中，video元素或audio元素的error属性为null，但是任何时候只要出现错误，error属性将返回一个MediaError对象，该对象的code返回对应的错误状态，共有4个可能值：\n   \n* `MEDIA_ERR_ABORTED(数字值为1)`，媒体数据的下载过程由于用户的操作原因而被终止。\n- `MEDIA_ERR_NETWORK(数字值为2)`，确认媒体资源可用，但是在下载出现网络错误，媒体数据的下载过程被中止。\n<!-- more -->\n\n- `MEDIA_ERR_DECODE(数字值为3)`，确认媒体资源可用，但是解码时发生错误。\n- `MEDIA_ERR_SRC_NOT_SUPPORTED(数字值为4)`，媒体资源不可用或媒体格式不被支持。\n代码如下：\n```js\n<video src=\"\" id=\"videoElement\"></video>\n var video = document.getElementById(\"videoElement\");\n video.addEventListener(\"error\",function(){\n     var error = video.error;\n     swicth(error.code) {\n         case 1:\n            alert(\"视频的下载过程被中止\");\n         break;\n \n         case 2:\n            alert(\"网络发生故障，视频的下载过程被中止\");\n         break;\n \n         case 3:\n            alert(\"解码失败\");\n         break;\n \n         case 4:\n            alert(\"媒体资源不可用或媒体格式不被支持\");\n         break; \n \n     }\n },false);\n```\n### networkState属性\n\n在媒体数据加载过程中可以使用video元素或audio元素的networkState属性读取当前网络状态，共有4个可能的值；\n1．  NETWORK_EMPTY（数字值为0）：元素处于初始状态。\n2．  NETWORK_IDLE(数字值为1)，浏览器已选择好用什么编码格式来播放媒体，但是尚未建立网络连接。\n3．  NETWORK_LOADING(数字值为2)：媒体数据加载中\n4．  NETWORK_NO_SOURCE(数字值为3)，没有支持的编码格式，不执行加载。\n### currentTime属性与duration属性\n\nvideo元素或audio元素的currentTime属性来读取媒体的当前播放位置(单位是s)，也可以通过修改currentTime属性来修改当前播放位置，如果修改的位置上没有可用的媒体数据时，将抛出INVALID_STATE_ERR异常；\nvideo元素或audio元素的duration属性来读取媒体文件总的播放时间。\n我们可以来做demo如下：\nHTML代码如下：\n\n```html\n<video id=\"video\" controls width=640 height=360 autoplay>\n    <source src=\"Wildlife/Wildlife.ogv\" type=\"video/ogg; codecs=\"theora, vorbis\"\"/>\n    <source src=\"Wildlife/Wildlife.webm\" type=\"video/webm\" >\n    <source src=\"Wildlife/Wildlife.mp4\" type=\"video/mp4\">\n    <p>Video is not visible, most likely your browser does not support HTML5 video</p>\n</video>\n<button onclick=\"getCurTime()\" type=\"button\">获得当前时间的位置</button>\n<button onclick=\"setCurTime()\" type=\"button\">把时间位置设置为 5 秒</button>\n<button onclick=\"duration()\" type=\"button\">读取媒体文件总的播放时间</button>\n```\n \nJS代码如下：\n```js\nvar myVid=document.getElementById(\"video\");\nfunction getCurTime(){ \n    // 获得当前视频或者音频时间的位置\n    alert(myVid.currentTime);   \n} \nfunction setCurTime(){ \n// 给当前的视频或者音频设置5s时间的位置\n    myVid.currentTime=5;        \n} \nfunction duration() {\n    //读取媒体文件总的播放时间 单位为S\n    alert(myVid.duration); \n}\n```\n大家可以复制代码，换一张视频地址就可以看到效果了~；\n\n### played属性，paused属性与ended属性\n- played：video元素或audio元素的played属性来返回一个TimeRanges对象，从该对象中可以读取媒体文件的已播放部分的时间段。开始时间为已播放部分的开始时间，结束时间为已播放部分的结束时间。\n- paused属性：使用video元素或audio元素的paused属性来返回一个布尔值，表示是否处于暂停播放中，true表示媒体暂停播放，false表示媒体正在播放；\n- ended属性：使用video元素或audio元素的ended属性来返回一个布尔值，表示是否播放完毕，true表示媒体播放完毕，false表示媒体还没有播放完毕。\nHTML代码如下：\n```html\n    <video id=\"video\" controls width=640 height=360 autoplay loop>\n    <source src=\"Wildlife/Wildlife.ogv\" type=\"video/ogg; codecs=\"theora, vorbis\"\"/>\n    <source src=\"Wildlife/Wildlife.webm\" type=\"video/webm\" >\n    <source src=\"Wildlife/Wildlife.mp4\" type=\"video/mp4\">\n    <p>Video is not visible, most likely your browser does not support HTML5 video</p>\n    </video>\n    <button onclick=\"played()\" type=\"button\">读取媒体文件的已播放部分的时间段</button>\n    <button onclick=\"paused()\" type=\"button\">是否处于暂停播放</button>\n    <button onclick=\"ended()\" type=\"button\">是否播放完毕</button>\n```\n\nJS代码如下：\n```js\nvar myVid=document.getElementById(\"video\");\nfunction played() {\n    //读取媒体文件的已播放部分的时间段\n    console.log(myVid.played);\n}\nfunction paused() {\n    // 是否处于暂停播放\n    alert(myVid.paused);\n}\nfunction ended() {\n    // 是否播放完毕\n    alert(myVid.ended);\n}\n\n```\n### defaultPlaybackRate属性与playbackRate属性\n- defaultPlaybackRate属性：可以使用video元素或者audio元素的defaultPlaybackRate属性读取或修改媒体默认的播放速率。\n- playbackRate属性：可以使用video元素或者audio元素的playbackRate属性读取或修改媒体当前的播放速率。\n### volume属性与muted属性\n- volume属性：使用video元素或audio元素的volume属性读取或修改媒体的播放音量，范围为0到1,0为静音，1为最大音量。\n- muted属性：使用video元素或audio元素的muted属性读取或修改媒体的静音状态，该值为布尔值，true表示处于静音状态，false表示处于非静音状态。\nHTML代码如下：\n```html\n<video id=\"video\" controls width=640 height=360 autoplay loop>\n    <source src=\"Wildlife/Wildlife.ogv\" type=\"video/ogg; codecs=\"theora, vorbis\"\"/>\n    <source src=\"Wildlife/Wildlife.webm\" type=\"video/webm\" >\n    <source src=\"Wildlife/Wildlife.mp4\" type=\"video/mp4\">\n    <p>Video is not visible, most likely your browser does not support HTML5 video</p>\n</video>\n<button onclick=\"volume()\" type=\"button\">读取或修改媒体的播放音量</button>\n<button onclick=\"muted()\" type=\"button\">读取或修改媒体当前的静音状态</button>\n```\n\nJS代码如下：\n```js\nvar myVid=document.getElementById(\"video\");\nfunction volume(){\n    // 读取或修改媒体的播放音量\n    myVid.volume = 0.1;\n}\nfunction muted() {\n    //读取或修改媒体当前的静音状态\n    myVid.muted = true;\n}\n```\n大家可以使用下，当我点击”读取或修改媒体的播放音量”按钮时候，声音会变的很小，当我点击”读取或修改媒体当前的静音状态”按钮时候，视频完全就没有声音。\n###方法\nvideo元素与audio元素有以下四种方法；\n- play方法：使用play方法来播放媒体，自动将元素的paused属性的值变为false。\n- pause方法：使用pause方法来暂停播放，自动将元素的paused属性的值变为true。\n- load方法，使用load方法来重新载入媒体进行播放，自动将元素的playbackRate属性的值变为defaultPlaybackRate属性的值，自动将元素的error的值变为null。\n下面是播放和暂停的demo如下：\n```html\n<video id=\"video\" controls width=640 height=360>\n    <source src=\"Wildlife/Wildlife.ogv\" type=\"video/ogg; codecs=\"theora, vorbis\"\"/>\n    <source src=\"Wildlife/Wildlife.webm\" type=\"video/webm\" >\n    <source src=\"Wildlife/Wildlife.mp4\" type=\"video/mp4\">\n    <p>Video is not visible, most likely your browser does not support HTML5 video</p>\n</video>\n<button onclick=\"play()\">播放</button>\n<button onclick=\"pause()\">暂停</button>\n```\nJS代码如下：\n```js\nvar myVid=document.getElementById(\"video\");\n// 监听视频播放结束的事件\nmyVid.addEventListener(\"ended\",function(){\n    alert(\"播放结束\");\n},true);\n// 发生错误\nmyVid.addEventListener(\"error\",function(){\n    switch(myVid.error.code) {\n        case 1: \n          alert(\"视频的下载过程被中止\");\n        break;\n\n        case 2:\n              alert(\"网络发生故障，视频的下载过程被中止\");\n        break;\n\n        case 3:\n              alert(\"解码失败\");\n        break;\n\n        case 4:\n              alert(\"不支持播放的视频格式\");\n        break;\n\n        default:\n              alert(\"发生未知错误\");\n        }\n},false);\n\nfunction play() {\n    // 播放视频\n    myVid.play();\n}\nfunction pause() {\n    // 暂停播放\n    myVid.pause();\n}\n```\n>如上代码，默认的情况下是不自动播放，当我点击播放按钮时候，就播放，当我点击暂停按钮时候就停止当前的播放。\n- canPlayType方法：\n使用canPlayType方法来测试浏览器是否支持指定的媒体类型，该方法定义如下：\n`var support = videoElement.canPlayType(type);`\nvideoElement表示页面上的video元素或audio元素，该方法使用一个参数type，该参数的指定方法与source元素的type参数的指定方法相同，用播放文件的MIME类型来指定，可以在指定的字符串中加上表示媒体编码格式的codes参数。\n该方法可能返回的值如下所示：\n1. 空字符串：表示浏览器不支持此种媒体类型。\n2. maybe: 表示浏览器可能支持此种媒体类型。\n3. probably： 表示浏览器确定支持此种媒体类型。\nHTML代码如下：\n```html\n<video id=\"video\" controls width=640 height=360>\n    <source src=\"Wildlife/Wildlife.ogv\" type=\"video/ogg; codecs=\"theora, vorbis\"\"/>\n    <source src=\"Wildlife/Wildlife.webm\" type=\"video/webm\" >\n    <source src=\"Wildlife/Wildlife.mp4\" type=\"video/mp4\">\n    <p>Video is not visible, most likely your browser does not support HTML5 video</p>\n</video>\n<button onclick=\"canPlayType()\">canPlayType方法</button>\n```\n\nJS代码如下：\n```js\nvar myVid=document.getElementById(\"video\");\nfunction canPlayType() {\n    var support = myVid.canPlayType(\"video/webm\");\n    console.log(support); // maybe\n\n    var support = myVid.canPlayType(\"video/ogg; codecs=\"theora, vorbis\");\n    console.log(support); // probably\n}\n```\n### 事件\n1. 事件处理方式\n\n使用video元素或audio元素的事件方式有2种，第一种是监听的方式，使用video元素或audio元素的addEventListener方法来对事件的发生进行监听，该方法定义如下：\n`videoElement.addEventListener(type,listener,userCapture);`\n\n如上的监听方式和我们的JS的监听的方式一样，不做详细介绍，我们来看看第二种事件监听方式是为javascript脚本中常见的获取事件句柄的方式，如下所示：\n```js\n<video id=”” src=””  onplay=”begin()”></video>\nfunction begin(){}\n```\n\n| 事件   |  描述   |\n| :---: | :---: |\n|   loadstart\t  |    浏览器开始在网上寻找媒体数据   |\n|progress| 浏览器正在获取媒体数据|\n| suspend|\t 浏览器暂停获取媒体数据，但是下载过程中并没有正常结束|\n |abort\t| 浏览器在下载完全部媒体数据之前中止获取媒体数据，但是并不是由错误引起的|\n |error|\t 获取媒体数据过程中出错|\n |emptied|\t 暂不考虑，可以网上看|\n |stalled|\t 浏览器尝试获取媒体数据失败|\n |play\t| 即将开始播放，当执行了play方法时触发，或数据下载后元素被设为autoplay|\n |pause\t| 播放暂停，当执行了pause方法触发|\n |loadedmetadata|\t 浏览器获取完媒体的时长和字节数|\n |loadeddata\t| 浏览器已加载完毕当前播放位置的媒体数据，准备播放|\n |waiting|\t 可以暂不看|\n |playing|\t 正在播放|\n |canplay|\t 浏览器能够播放媒体，但估计以当前播放速率不能直接将媒体播完，播放期间需要缓冲|\n |canplaythrough|\t 浏览器能够播放媒体，但估计以当前播放速率能将媒体播完，不再需要缓冲|\n |seeking|\t Seeking变为true，表示浏览器正在请求数据|\n |seeked|\t Seeking属性变为false，表面浏览器停止请求数据|\n |timeupdate|\t 当前播放位置发生改变，可能是播放过程中的自然改变，也可能是人为改变，或由于播放不能连续而发生的跳变。|\n |ended|\t 播放结束后停止播放|\n |ratechange\t| DefaultplaybackRate属性或playbackRate属性发生改变|\n |durationchange|\t 播放时长发生改变|\n |volumechange|\t volume属性或muted属性发生改变|\n \t \n","slug":"video标签的属性和方法总结","published":1,"updated":"2017-01-15T10:09:41.642Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy89a3ak00062kofuq0iuzjd","content":"<p>最近想做一个弹幕插件，查了很多video标签的属性和方法</p>\n<h3 id=\"error属性\"><a href=\"#error属性\" class=\"headerlink\" title=\"error属性\"></a>error属性</h3><p>   在正常读取时候，使用媒体数据的过程中，video元素或audio元素的error属性为null，但是任何时候只要出现错误，error属性将返回一个MediaError对象，该对象的code返回对应的错误状态，共有4个可能值：</p>\n<ul>\n<li><code>MEDIA_ERR_ABORTED(数字值为1)</code>，媒体数据的下载过程由于用户的操作原因而被终止。</li>\n</ul>\n<ul>\n<li><p><code>MEDIA_ERR_NETWORK(数字值为2)</code>，确认媒体资源可用，但是在下载出现网络错误，媒体数据的下载过程被中止。</p>\n<a id=\"more\"></a>\n</li>\n<li><p><code>MEDIA_ERR_DECODE(数字值为3)</code>，确认媒体资源可用，但是解码时发生错误。</p>\n</li>\n<li><code>MEDIA_ERR_SRC_NOT_SUPPORTED(数字值为4)</code>，媒体资源不可用或媒体格式不被支持。<br>代码如下：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;video src=<span class=\"string\">\"\"</span> id=<span class=\"string\">\"videoElement\"</span>&gt;&lt;/video&gt;</div><div class=\"line\"> <span class=\"keyword\">var</span> video = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"videoElement\"</span>);</div><div class=\"line\"> video.addEventListener(<span class=\"string\">\"error\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> error = video.error;</div><div class=\"line\">     swicth(error.code) &#123;</div><div class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">            alert(<span class=\"string\">\"视频的下载过程被中止\"</span>);</div><div class=\"line\">         <span class=\"keyword\">break</span>;</div><div class=\"line\"> </div><div class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">            alert(<span class=\"string\">\"网络发生故障，视频的下载过程被中止\"</span>);</div><div class=\"line\">         <span class=\"keyword\">break</span>;</div><div class=\"line\"> </div><div class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">            alert(<span class=\"string\">\"解码失败\"</span>);</div><div class=\"line\">         <span class=\"keyword\">break</span>;</div><div class=\"line\"> </div><div class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</div><div class=\"line\">            alert(<span class=\"string\">\"媒体资源不可用或媒体格式不被支持\"</span>);</div><div class=\"line\">         <span class=\"keyword\">break</span>; </div><div class=\"line\"> </div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;,<span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"networkState属性\"><a href=\"#networkState属性\" class=\"headerlink\" title=\"networkState属性\"></a>networkState属性</h3><p>在媒体数据加载过程中可以使用video元素或audio元素的networkState属性读取当前网络状态，共有4个可能的值；<br>1．  NETWORK_EMPTY（数字值为0）：元素处于初始状态。<br>2．  NETWORK_IDLE(数字值为1)，浏览器已选择好用什么编码格式来播放媒体，但是尚未建立网络连接。<br>3．  NETWORK_LOADING(数字值为2)：媒体数据加载中<br>4．  NETWORK_NO_SOURCE(数字值为3)，没有支持的编码格式，不执行加载。</p>\n<h3 id=\"currentTime属性与duration属性\"><a href=\"#currentTime属性与duration属性\" class=\"headerlink\" title=\"currentTime属性与duration属性\"></a>currentTime属性与duration属性</h3><p>video元素或audio元素的currentTime属性来读取媒体的当前播放位置(单位是s)，也可以通过修改currentTime属性来修改当前播放位置，如果修改的位置上没有可用的媒体数据时，将抛出INVALID_STATE_ERR异常；<br>video元素或audio元素的duration属性来读取媒体文件总的播放时间。<br>我们可以来做demo如下：<br>HTML代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">controls</span> <span class=\"attr\">width</span>=<span class=\"string\">640</span> <span class=\"attr\">height</span>=<span class=\"string\">360</span> <span class=\"attr\">autoplay</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.ogv\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg; codecs=\"</span><span class=\"attr\">theora</span>, <span class=\"attr\">vorbis</span>\"\"/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.webm\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/webm\"</span> &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Video is not visible, most likely your browser does not support HTML5 video<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"getCurTime()\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>获得当前时间的位置<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"setCurTime()\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>把时间位置设置为 5 秒<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"duration()\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>读取媒体文件总的播放时间<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>JS代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myVid=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"video\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurTime</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    <span class=\"comment\">// 获得当前视频或者音频时间的位置</span></div><div class=\"line\">    alert(myVid.currentTime);   </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCurTime</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\"><span class=\"comment\">// 给当前的视频或者音频设置5s时间的位置</span></div><div class=\"line\">    myVid.currentTime=<span class=\"number\">5</span>;        </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">duration</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//读取媒体文件总的播放时间 单位为S</span></div><div class=\"line\">    alert(myVid.duration); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>大家可以复制代码，换一张视频地址就可以看到效果了~；</p>\n<h3 id=\"played属性，paused属性与ended属性\"><a href=\"#played属性，paused属性与ended属性\" class=\"headerlink\" title=\"played属性，paused属性与ended属性\"></a>played属性，paused属性与ended属性</h3><ul>\n<li>played：video元素或audio元素的played属性来返回一个TimeRanges对象，从该对象中可以读取媒体文件的已播放部分的时间段。开始时间为已播放部分的开始时间，结束时间为已播放部分的结束时间。</li>\n<li>paused属性：使用video元素或audio元素的paused属性来返回一个布尔值，表示是否处于暂停播放中，true表示媒体暂停播放，false表示媒体正在播放；</li>\n<li>ended属性：使用video元素或audio元素的ended属性来返回一个布尔值，表示是否播放完毕，true表示媒体播放完毕，false表示媒体还没有播放完毕。<br>HTML代码如下：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">controls</span> <span class=\"attr\">width</span>=<span class=\"string\">640</span> <span class=\"attr\">height</span>=<span class=\"string\">360</span> <span class=\"attr\">autoplay</span> <span class=\"attr\">loop</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.ogv\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg; codecs=\"</span><span class=\"attr\">theora</span>, <span class=\"attr\">vorbis</span>\"\"/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.webm\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/webm\"</span> &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Video is not visible, most likely your browser does not support HTML5 video<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"played()\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>读取媒体文件的已播放部分的时间段<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"paused()\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>是否处于暂停播放<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"ended()\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>是否播放完毕<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>JS代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myVid=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"video\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">played</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//读取媒体文件的已播放部分的时间段</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(myVid.played);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">paused</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 是否处于暂停播放</span></div><div class=\"line\">    alert(myVid.paused);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ended</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 是否播放完毕</span></div><div class=\"line\">    alert(myVid.ended);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"defaultPlaybackRate属性与playbackRate属性\"><a href=\"#defaultPlaybackRate属性与playbackRate属性\" class=\"headerlink\" title=\"defaultPlaybackRate属性与playbackRate属性\"></a>defaultPlaybackRate属性与playbackRate属性</h3><ul>\n<li>defaultPlaybackRate属性：可以使用video元素或者audio元素的defaultPlaybackRate属性读取或修改媒体默认的播放速率。</li>\n<li>playbackRate属性：可以使用video元素或者audio元素的playbackRate属性读取或修改媒体当前的播放速率。<h3 id=\"volume属性与muted属性\"><a href=\"#volume属性与muted属性\" class=\"headerlink\" title=\"volume属性与muted属性\"></a>volume属性与muted属性</h3></li>\n<li>volume属性：使用video元素或audio元素的volume属性读取或修改媒体的播放音量，范围为0到1,0为静音，1为最大音量。</li>\n<li>muted属性：使用video元素或audio元素的muted属性读取或修改媒体的静音状态，该值为布尔值，true表示处于静音状态，false表示处于非静音状态。<br>HTML代码如下：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">controls</span> <span class=\"attr\">width</span>=<span class=\"string\">640</span> <span class=\"attr\">height</span>=<span class=\"string\">360</span> <span class=\"attr\">autoplay</span> <span class=\"attr\">loop</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.ogv\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg; codecs=\"</span><span class=\"attr\">theora</span>, <span class=\"attr\">vorbis</span>\"\"/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.webm\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/webm\"</span> &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Video is not visible, most likely your browser does not support HTML5 video<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"volume()\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>读取或修改媒体的播放音量<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"muted()\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>读取或修改媒体当前的静音状态<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>JS代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myVid=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"video\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">volume</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 读取或修改媒体的播放音量</span></div><div class=\"line\">    myVid.volume = <span class=\"number\">0.1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">muted</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//读取或修改媒体当前的静音状态</span></div><div class=\"line\">    myVid.muted = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>大家可以使用下，当我点击”读取或修改媒体的播放音量”按钮时候，声音会变的很小，当我点击”读取或修改媒体当前的静音状态”按钮时候，视频完全就没有声音。</p>\n<p>###方法<br>video元素与audio元素有以下四种方法；</p>\n<ul>\n<li>play方法：使用play方法来播放媒体，自动将元素的paused属性的值变为false。</li>\n<li>pause方法：使用pause方法来暂停播放，自动将元素的paused属性的值变为true。</li>\n<li>load方法，使用load方法来重新载入媒体进行播放，自动将元素的playbackRate属性的值变为defaultPlaybackRate属性的值，自动将元素的error的值变为null。<br>下面是播放和暂停的demo如下：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">controls</span> <span class=\"attr\">width</span>=<span class=\"string\">640</span> <span class=\"attr\">height</span>=<span class=\"string\">360</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.ogv\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg; codecs=\"</span><span class=\"attr\">theora</span>, <span class=\"attr\">vorbis</span>\"\"/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.webm\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/webm\"</span> &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Video is not visible, most likely your browser does not support HTML5 video<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"play()\"</span>&gt;</span>播放<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"pause()\"</span>&gt;</span>暂停<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>JS代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myVid=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"video\"</span>);</div><div class=\"line\"><span class=\"comment\">// 监听视频播放结束的事件</span></div><div class=\"line\">myVid.addEventListener(<span class=\"string\">\"ended\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"播放结束\"</span>);</div><div class=\"line\">&#125;,<span class=\"literal\">true</span>);</div><div class=\"line\"><span class=\"comment\">// 发生错误</span></div><div class=\"line\">myVid.addEventListener(<span class=\"string\">\"error\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(myVid.error.code) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>: </div><div class=\"line\">          alert(<span class=\"string\">\"视频的下载过程被中止\"</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">              alert(<span class=\"string\">\"网络发生故障，视频的下载过程被中止\"</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">              alert(<span class=\"string\">\"解码失败\"</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</div><div class=\"line\">              alert(<span class=\"string\">\"不支持播放的视频格式\"</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">              alert(<span class=\"string\">\"发生未知错误\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;,<span class=\"literal\">false</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">play</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 播放视频</span></div><div class=\"line\">    myVid.play();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pause</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 暂停播放</span></div><div class=\"line\">    myVid.pause();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如上代码，默认的情况下是不自动播放，当我点击播放按钮时候，就播放，当我点击暂停按钮时候就停止当前的播放。</p>\n<ul>\n<li>canPlayType方法：<br>使用canPlayType方法来测试浏览器是否支持指定的媒体类型，该方法定义如下：<br><code>var support = videoElement.canPlayType(type);</code><br>videoElement表示页面上的video元素或audio元素，该方法使用一个参数type，该参数的指定方法与source元素的type参数的指定方法相同，用播放文件的MIME类型来指定，可以在指定的字符串中加上表示媒体编码格式的codes参数。<br>该方法可能返回的值如下所示：</li>\n</ul>\n<ol>\n<li>空字符串：表示浏览器不支持此种媒体类型。</li>\n<li>maybe: 表示浏览器可能支持此种媒体类型。</li>\n<li>probably： 表示浏览器确定支持此种媒体类型。<br>HTML代码如下：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">controls</span> <span class=\"attr\">width</span>=<span class=\"string\">640</span> <span class=\"attr\">height</span>=<span class=\"string\">360</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.ogv\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg; codecs=\"</span><span class=\"attr\">theora</span>, <span class=\"attr\">vorbis</span>\"\"/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.webm\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/webm\"</span> &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Video is not visible, most likely your browser does not support HTML5 video<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"canPlayType()\"</span>&gt;</span>canPlayType方法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>JS代码如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myVid=document.getElementById(\"video\");</div><div class=\"line\">function canPlayType() &#123;</div><div class=\"line\">    var support = myVid.canPlayType(\"video/webm\");</div><div class=\"line\">    console.log(support); // maybe</div><div class=\"line\"></div><div class=\"line\">    var support = myVid.canPlayType(\"video/ogg; codecs=\"theora, vorbis\");</div><div class=\"line\">    console.log(support); // probably</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><ol>\n<li>事件处理方式</li>\n</ol>\n<p>使用video元素或audio元素的事件方式有2种，第一种是监听的方式，使用video元素或audio元素的addEventListener方法来对事件的发生进行监听，该方法定义如下：<br><code>videoElement.addEventListener(type,listener,userCapture);</code></p>\n<p>如上的监听方式和我们的JS的监听的方式一样，不做详细介绍，我们来看看第二种事件监听方式是为javascript脚本中常见的获取事件句柄的方式，如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;video id=”” src=””  onplay=”begin()”&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">begin</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">事件</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">loadstart</td>\n<td style=\"text-align:center\">浏览器开始在网上寻找媒体数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">progress</td>\n<td style=\"text-align:center\">浏览器正在获取媒体数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">suspend</td>\n<td style=\"text-align:center\">浏览器暂停获取媒体数据，但是下载过程中并没有正常结束</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">abort</td>\n<td style=\"text-align:center\">浏览器在下载完全部媒体数据之前中止获取媒体数据，但是并不是由错误引起的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">error</td>\n<td style=\"text-align:center\">获取媒体数据过程中出错</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">emptied</td>\n<td style=\"text-align:center\">暂不考虑，可以网上看</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stalled</td>\n<td style=\"text-align:center\">浏览器尝试获取媒体数据失败</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">play</td>\n<td style=\"text-align:center\">即将开始播放，当执行了play方法时触发，或数据下载后元素被设为autoplay</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pause</td>\n<td style=\"text-align:center\">播放暂停，当执行了pause方法触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">loadedmetadata</td>\n<td style=\"text-align:center\">浏览器获取完媒体的时长和字节数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">loadeddata</td>\n<td style=\"text-align:center\">浏览器已加载完毕当前播放位置的媒体数据，准备播放</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">waiting</td>\n<td style=\"text-align:center\">可以暂不看</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">playing</td>\n<td style=\"text-align:center\">正在播放</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">canplay</td>\n<td style=\"text-align:center\">浏览器能够播放媒体，但估计以当前播放速率不能直接将媒体播完，播放期间需要缓冲</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">canplaythrough</td>\n<td style=\"text-align:center\">浏览器能够播放媒体，但估计以当前播放速率能将媒体播完，不再需要缓冲</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">seeking</td>\n<td style=\"text-align:center\">Seeking变为true，表示浏览器正在请求数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">seeked</td>\n<td style=\"text-align:center\">Seeking属性变为false，表面浏览器停止请求数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">timeupdate</td>\n<td style=\"text-align:center\">当前播放位置发生改变，可能是播放过程中的自然改变，也可能是人为改变，或由于播放不能连续而发生的跳变。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ended</td>\n<td style=\"text-align:center\">播放结束后停止播放</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ratechange</td>\n<td style=\"text-align:center\">DefaultplaybackRate属性或playbackRate属性发生改变</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">durationchange</td>\n<td style=\"text-align:center\">播放时长发生改变</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">volumechange</td>\n<td style=\"text-align:center\">volume属性或muted属性发生改变</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<p>最近想做一个弹幕插件，查了很多video标签的属性和方法</p>\n<h3 id=\"error属性\"><a href=\"#error属性\" class=\"headerlink\" title=\"error属性\"></a>error属性</h3><p>   在正常读取时候，使用媒体数据的过程中，video元素或audio元素的error属性为null，但是任何时候只要出现错误，error属性将返回一个MediaError对象，该对象的code返回对应的错误状态，共有4个可能值：</p>\n<ul>\n<li><code>MEDIA_ERR_ABORTED(数字值为1)</code>，媒体数据的下载过程由于用户的操作原因而被终止。</li>\n</ul>\n<ul>\n<li><p><code>MEDIA_ERR_NETWORK(数字值为2)</code>，确认媒体资源可用，但是在下载出现网络错误，媒体数据的下载过程被中止。</p>","more":"</li>\n<li><p><code>MEDIA_ERR_DECODE(数字值为3)</code>，确认媒体资源可用，但是解码时发生错误。</p>\n</li>\n<li><code>MEDIA_ERR_SRC_NOT_SUPPORTED(数字值为4)</code>，媒体资源不可用或媒体格式不被支持。<br>代码如下：<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;video src=<span class=\"string\">\"\"</span> id=<span class=\"string\">\"videoElement\"</span>&gt;&lt;/video&gt;</div><div class=\"line\"> <span class=\"keyword\">var</span> video = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"videoElement\"</span>);</div><div class=\"line\"> video.addEventListener(<span class=\"string\">\"error\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> error = video.error;</div><div class=\"line\">     swicth(error.code) &#123;</div><div class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">            alert(<span class=\"string\">\"视频的下载过程被中止\"</span>);</div><div class=\"line\">         <span class=\"keyword\">break</span>;</div><div class=\"line\"> </div><div class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">            alert(<span class=\"string\">\"网络发生故障，视频的下载过程被中止\"</span>);</div><div class=\"line\">         <span class=\"keyword\">break</span>;</div><div class=\"line\"> </div><div class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">            alert(<span class=\"string\">\"解码失败\"</span>);</div><div class=\"line\">         <span class=\"keyword\">break</span>;</div><div class=\"line\"> </div><div class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</div><div class=\"line\">            alert(<span class=\"string\">\"媒体资源不可用或媒体格式不被支持\"</span>);</div><div class=\"line\">         <span class=\"keyword\">break</span>; </div><div class=\"line\"> </div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;,<span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"networkState属性\"><a href=\"#networkState属性\" class=\"headerlink\" title=\"networkState属性\"></a>networkState属性</h3><p>在媒体数据加载过程中可以使用video元素或audio元素的networkState属性读取当前网络状态，共有4个可能的值；<br>1．  NETWORK_EMPTY（数字值为0）：元素处于初始状态。<br>2．  NETWORK_IDLE(数字值为1)，浏览器已选择好用什么编码格式来播放媒体，但是尚未建立网络连接。<br>3．  NETWORK_LOADING(数字值为2)：媒体数据加载中<br>4．  NETWORK_NO_SOURCE(数字值为3)，没有支持的编码格式，不执行加载。</p>\n<h3 id=\"currentTime属性与duration属性\"><a href=\"#currentTime属性与duration属性\" class=\"headerlink\" title=\"currentTime属性与duration属性\"></a>currentTime属性与duration属性</h3><p>video元素或audio元素的currentTime属性来读取媒体的当前播放位置(单位是s)，也可以通过修改currentTime属性来修改当前播放位置，如果修改的位置上没有可用的媒体数据时，将抛出INVALID_STATE_ERR异常；<br>video元素或audio元素的duration属性来读取媒体文件总的播放时间。<br>我们可以来做demo如下：<br>HTML代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">controls</span> <span class=\"attr\">width</span>=<span class=\"string\">640</span> <span class=\"attr\">height</span>=<span class=\"string\">360</span> <span class=\"attr\">autoplay</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.ogv\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg; codecs=\"</span><span class=\"attr\">theora</span>, <span class=\"attr\">vorbis</span>\"\"/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.webm\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/webm\"</span> &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Video is not visible, most likely your browser does not support HTML5 video<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"getCurTime()\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>获得当前时间的位置<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"setCurTime()\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>把时间位置设置为 5 秒<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"duration()\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>读取媒体文件总的播放时间<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>JS代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myVid=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"video\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCurTime</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    <span class=\"comment\">// 获得当前视频或者音频时间的位置</span></div><div class=\"line\">    alert(myVid.currentTime);   </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setCurTime</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\"><span class=\"comment\">// 给当前的视频或者音频设置5s时间的位置</span></div><div class=\"line\">    myVid.currentTime=<span class=\"number\">5</span>;        </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">duration</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//读取媒体文件总的播放时间 单位为S</span></div><div class=\"line\">    alert(myVid.duration); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>大家可以复制代码，换一张视频地址就可以看到效果了~；</p>\n<h3 id=\"played属性，paused属性与ended属性\"><a href=\"#played属性，paused属性与ended属性\" class=\"headerlink\" title=\"played属性，paused属性与ended属性\"></a>played属性，paused属性与ended属性</h3><ul>\n<li>played：video元素或audio元素的played属性来返回一个TimeRanges对象，从该对象中可以读取媒体文件的已播放部分的时间段。开始时间为已播放部分的开始时间，结束时间为已播放部分的结束时间。</li>\n<li>paused属性：使用video元素或audio元素的paused属性来返回一个布尔值，表示是否处于暂停播放中，true表示媒体暂停播放，false表示媒体正在播放；</li>\n<li>ended属性：使用video元素或audio元素的ended属性来返回一个布尔值，表示是否播放完毕，true表示媒体播放完毕，false表示媒体还没有播放完毕。<br>HTML代码如下：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">controls</span> <span class=\"attr\">width</span>=<span class=\"string\">640</span> <span class=\"attr\">height</span>=<span class=\"string\">360</span> <span class=\"attr\">autoplay</span> <span class=\"attr\">loop</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.ogv\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg; codecs=\"</span><span class=\"attr\">theora</span>, <span class=\"attr\">vorbis</span>\"\"/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.webm\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/webm\"</span> &gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Video is not visible, most likely your browser does not support HTML5 video<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"played()\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>读取媒体文件的已播放部分的时间段<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"paused()\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>是否处于暂停播放<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"ended()\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>是否播放完毕<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>JS代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myVid=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"video\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">played</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//读取媒体文件的已播放部分的时间段</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(myVid.played);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">paused</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 是否处于暂停播放</span></div><div class=\"line\">    alert(myVid.paused);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ended</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 是否播放完毕</span></div><div class=\"line\">    alert(myVid.ended);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"defaultPlaybackRate属性与playbackRate属性\"><a href=\"#defaultPlaybackRate属性与playbackRate属性\" class=\"headerlink\" title=\"defaultPlaybackRate属性与playbackRate属性\"></a>defaultPlaybackRate属性与playbackRate属性</h3><ul>\n<li>defaultPlaybackRate属性：可以使用video元素或者audio元素的defaultPlaybackRate属性读取或修改媒体默认的播放速率。</li>\n<li>playbackRate属性：可以使用video元素或者audio元素的playbackRate属性读取或修改媒体当前的播放速率。<h3 id=\"volume属性与muted属性\"><a href=\"#volume属性与muted属性\" class=\"headerlink\" title=\"volume属性与muted属性\"></a>volume属性与muted属性</h3></li>\n<li>volume属性：使用video元素或audio元素的volume属性读取或修改媒体的播放音量，范围为0到1,0为静音，1为最大音量。</li>\n<li>muted属性：使用video元素或audio元素的muted属性读取或修改媒体的静音状态，该值为布尔值，true表示处于静音状态，false表示处于非静音状态。<br>HTML代码如下：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">controls</span> <span class=\"attr\">width</span>=<span class=\"string\">640</span> <span class=\"attr\">height</span>=<span class=\"string\">360</span> <span class=\"attr\">autoplay</span> <span class=\"attr\">loop</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.ogv\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg; codecs=\"</span><span class=\"attr\">theora</span>, <span class=\"attr\">vorbis</span>\"\"/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.webm\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/webm\"</span> &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Video is not visible, most likely your browser does not support HTML5 video<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"volume()\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>读取或修改媒体的播放音量<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"muted()\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span>&gt;</span>读取或修改媒体当前的静音状态<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>JS代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myVid=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"video\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">volume</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 读取或修改媒体的播放音量</span></div><div class=\"line\">    myVid.volume = <span class=\"number\">0.1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">muted</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//读取或修改媒体当前的静音状态</span></div><div class=\"line\">    myVid.muted = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>大家可以使用下，当我点击”读取或修改媒体的播放音量”按钮时候，声音会变的很小，当我点击”读取或修改媒体当前的静音状态”按钮时候，视频完全就没有声音。</p>\n<p>###方法<br>video元素与audio元素有以下四种方法；</p>\n<ul>\n<li>play方法：使用play方法来播放媒体，自动将元素的paused属性的值变为false。</li>\n<li>pause方法：使用pause方法来暂停播放，自动将元素的paused属性的值变为true。</li>\n<li>load方法，使用load方法来重新载入媒体进行播放，自动将元素的playbackRate属性的值变为defaultPlaybackRate属性的值，自动将元素的error的值变为null。<br>下面是播放和暂停的demo如下：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">controls</span> <span class=\"attr\">width</span>=<span class=\"string\">640</span> <span class=\"attr\">height</span>=<span class=\"string\">360</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.ogv\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg; codecs=\"</span><span class=\"attr\">theora</span>, <span class=\"attr\">vorbis</span>\"\"/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.webm\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/webm\"</span> &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Video is not visible, most likely your browser does not support HTML5 video<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"play()\"</span>&gt;</span>播放<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"pause()\"</span>&gt;</span>暂停<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>JS代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myVid=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"video\"</span>);</div><div class=\"line\"><span class=\"comment\">// 监听视频播放结束的事件</span></div><div class=\"line\">myVid.addEventListener(<span class=\"string\">\"ended\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"播放结束\"</span>);</div><div class=\"line\">&#125;,<span class=\"literal\">true</span>);</div><div class=\"line\"><span class=\"comment\">// 发生错误</span></div><div class=\"line\">myVid.addEventListener(<span class=\"string\">\"error\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(myVid.error.code) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>: </div><div class=\"line\">          alert(<span class=\"string\">\"视频的下载过程被中止\"</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">              alert(<span class=\"string\">\"网络发生故障，视频的下载过程被中止\"</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">              alert(<span class=\"string\">\"解码失败\"</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</div><div class=\"line\">              alert(<span class=\"string\">\"不支持播放的视频格式\"</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">              alert(<span class=\"string\">\"发生未知错误\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;,<span class=\"literal\">false</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">play</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 播放视频</span></div><div class=\"line\">    myVid.play();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pause</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 暂停播放</span></div><div class=\"line\">    myVid.pause();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如上代码，默认的情况下是不自动播放，当我点击播放按钮时候，就播放，当我点击暂停按钮时候就停止当前的播放。</p>\n<ul>\n<li>canPlayType方法：<br>使用canPlayType方法来测试浏览器是否支持指定的媒体类型，该方法定义如下：<br><code>var support = videoElement.canPlayType(type);</code><br>videoElement表示页面上的video元素或audio元素，该方法使用一个参数type，该参数的指定方法与source元素的type参数的指定方法相同，用播放文件的MIME类型来指定，可以在指定的字符串中加上表示媒体编码格式的codes参数。<br>该方法可能返回的值如下所示：</li>\n</ul>\n<ol>\n<li>空字符串：表示浏览器不支持此种媒体类型。</li>\n<li>maybe: 表示浏览器可能支持此种媒体类型。</li>\n<li>probably： 表示浏览器确定支持此种媒体类型。<br>HTML代码如下：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">\"video\"</span> <span class=\"attr\">controls</span> <span class=\"attr\">width</span>=<span class=\"string\">640</span> <span class=\"attr\">height</span>=<span class=\"string\">360</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.ogv\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/ogg; codecs=\"</span><span class=\"attr\">theora</span>, <span class=\"attr\">vorbis</span>\"\"/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.webm\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/webm\"</span> &gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"Wildlife/Wildlife.mp4\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"video/mp4\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Video is not visible, most likely your browser does not support HTML5 video<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"canPlayType()\"</span>&gt;</span>canPlayType方法<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>JS代码如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myVid=document.getElementById(\"video\");</div><div class=\"line\">function canPlayType() &#123;</div><div class=\"line\">    var support = myVid.canPlayType(\"video/webm\");</div><div class=\"line\">    console.log(support); // maybe</div><div class=\"line\"></div><div class=\"line\">    var support = myVid.canPlayType(\"video/ogg; codecs=\"theora, vorbis\");</div><div class=\"line\">    console.log(support); // probably</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h3><ol>\n<li>事件处理方式</li>\n</ol>\n<p>使用video元素或audio元素的事件方式有2种，第一种是监听的方式，使用video元素或audio元素的addEventListener方法来对事件的发生进行监听，该方法定义如下：<br><code>videoElement.addEventListener(type,listener,userCapture);</code></p>\n<p>如上的监听方式和我们的JS的监听的方式一样，不做详细介绍，我们来看看第二种事件监听方式是为javascript脚本中常见的获取事件句柄的方式，如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;video id=”” src=””  onplay=”begin()”&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">begin</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">事件</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">loadstart</td>\n<td style=\"text-align:center\">浏览器开始在网上寻找媒体数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">progress</td>\n<td style=\"text-align:center\">浏览器正在获取媒体数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">suspend</td>\n<td style=\"text-align:center\">浏览器暂停获取媒体数据，但是下载过程中并没有正常结束</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">abort</td>\n<td style=\"text-align:center\">浏览器在下载完全部媒体数据之前中止获取媒体数据，但是并不是由错误引起的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">error</td>\n<td style=\"text-align:center\">获取媒体数据过程中出错</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">emptied</td>\n<td style=\"text-align:center\">暂不考虑，可以网上看</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">stalled</td>\n<td style=\"text-align:center\">浏览器尝试获取媒体数据失败</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">play</td>\n<td style=\"text-align:center\">即将开始播放，当执行了play方法时触发，或数据下载后元素被设为autoplay</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pause</td>\n<td style=\"text-align:center\">播放暂停，当执行了pause方法触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">loadedmetadata</td>\n<td style=\"text-align:center\">浏览器获取完媒体的时长和字节数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">loadeddata</td>\n<td style=\"text-align:center\">浏览器已加载完毕当前播放位置的媒体数据，准备播放</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">waiting</td>\n<td style=\"text-align:center\">可以暂不看</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">playing</td>\n<td style=\"text-align:center\">正在播放</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">canplay</td>\n<td style=\"text-align:center\">浏览器能够播放媒体，但估计以当前播放速率不能直接将媒体播完，播放期间需要缓冲</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">canplaythrough</td>\n<td style=\"text-align:center\">浏览器能够播放媒体，但估计以当前播放速率能将媒体播完，不再需要缓冲</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">seeking</td>\n<td style=\"text-align:center\">Seeking变为true，表示浏览器正在请求数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">seeked</td>\n<td style=\"text-align:center\">Seeking属性变为false，表面浏览器停止请求数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">timeupdate</td>\n<td style=\"text-align:center\">当前播放位置发生改变，可能是播放过程中的自然改变，也可能是人为改变，或由于播放不能连续而发生的跳变。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ended</td>\n<td style=\"text-align:center\">播放结束后停止播放</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ratechange</td>\n<td style=\"text-align:center\">DefaultplaybackRate属性或playbackRate属性发生改变</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">durationchange</td>\n<td style=\"text-align:center\">播放时长发生改变</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">volumechange</td>\n<td style=\"text-align:center\">volume属性或muted属性发生改变</td>\n</tr>\n</tbody>\n</table>"},{"title":"工具集","date":"2017-01-12T05:44:10.000Z","_content":"原来一直在印象笔记上写笔记，感觉自己像是一个小水轮车，水流过来的时候能用的上，但是知识沉淀率太低，总是看的多，忘得多。\n\n后来看到这个[知乎问题](https://www.zhihu.com/question/26865557)，觉得有必要开始总结，归纳，索引自己的知识和有用的资源。\n\n下面是总结的一些素材资源网站、在线工具、Chrome插件、益于时间管理的工具。作为找回资源的备份，本文会不断更新\n<!-- more -->\n\n### 素材资源网站\n\n#### 1. [阿里的矢量图标库](http://www.iconfont.cn/)\n丰富的图标可供下载，还可以选择自己想要的颜色，支持`SVG||PNG||AI`三种格式下载\n\n#### 2. [WEB安全色](http://www.bootcss.com/p/websafecolors/)\nBootstrap中文网下的推荐配色方案\n\n#### 3. [日系风格设计网站](http://bm.straightline.jp/)\n收录很多优质的网站设计\n\n#### 4. [方便查询标签的设计网站](http://www.collectui.com/)\n\n#### 5. [免费的图片素材](https://unsplash.com/)\n\n### 在线工具\n\n#### 1. [文件格式转换](https://convertio.co/zh/)\n处理PDF、Word文件，OCR识别等很多工具，强大且全面，最关键的是免费\n\n#### 2. [专业的PDf处理工具](http://www.ilovepdf.com/)\n\n支持各种格式和PDf之间的转换\n\n#### 3. [文图](http://wentu.io/)\n数据可视化工具，而且支持数据源API接口。（ps：这个我还不怎么会用）\n\n#### 4. [icon图标制作](http://www.ico.la/)\n\n### Chrome插件（*以下插件均是免费的*）\n\n#### 1. 谷歌访问助手\n方便下载以下插件的前提是你要先科学上网，这个插件可以帮助你上Google下的搜索、应用商店、账号管理、Gmail等服务。而且是**免费的**。\n#### 2. Adblock Plus\n强大的广告拦截插件，某60口中的装机必备\n#### 3. Chrono下载管理器\n可替代Chrome自带的下载器，功能很强大\n#### 4. ColorZilla\n网页拾色器，可以提取文字，图片的颜色，看到一款好的配色就可以提取出来\n#### 5. Google翻译 \n不多说，看文档必需品\n#### 6. Momentum\n美化新建标签页，还可以添加简单的日程管理\n#### 7. Page Ruler\n量取、查看视图元素的大小\n#### 8. React Developer Tools\nReact调试工具\n#### 9. Search by Image\n一键谷歌搜图\n#### 10. 一键管理所以扩展\n下载的插件多了，就需要用这个插件进行管理\n#### 11. 网页截图:注释&批注\n相比较其他截图插件，这个算是比较强大的了，但是没有滚动截屏的功能\n#### 12. 阅读模式\n这个对于经常要看技术博客的人算是必需品吧，屏蔽掉影响阅读的广告栏\n\n### 时间管理\n#### 1. Manic Time\n记录电脑活动的窗口，可用于量化时间分配，审视自己的工作效率（强烈推荐）\n#### 2. Android下的 奇妙日程\n日程计划管理的App\n\n### 彩蛋\n一些有趣的工具\n#### 1. Tickeys\n让你找对Coding的感觉\n","source":"_posts/工具集.md","raw":"---\ntitle: 工具集\ndate: 2017-01-12 13:44:10\ncategories:\n- 工具\ntags: \n- 素材资源\n- 在线工具\n- Chrome插件\n- 时间管理\n- 快乐的coding\n---\n原来一直在印象笔记上写笔记，感觉自己像是一个小水轮车，水流过来的时候能用的上，但是知识沉淀率太低，总是看的多，忘得多。\n\n后来看到这个[知乎问题](https://www.zhihu.com/question/26865557)，觉得有必要开始总结，归纳，索引自己的知识和有用的资源。\n\n下面是总结的一些素材资源网站、在线工具、Chrome插件、益于时间管理的工具。作为找回资源的备份，本文会不断更新\n<!-- more -->\n\n### 素材资源网站\n\n#### 1. [阿里的矢量图标库](http://www.iconfont.cn/)\n丰富的图标可供下载，还可以选择自己想要的颜色，支持`SVG||PNG||AI`三种格式下载\n\n#### 2. [WEB安全色](http://www.bootcss.com/p/websafecolors/)\nBootstrap中文网下的推荐配色方案\n\n#### 3. [日系风格设计网站](http://bm.straightline.jp/)\n收录很多优质的网站设计\n\n#### 4. [方便查询标签的设计网站](http://www.collectui.com/)\n\n#### 5. [免费的图片素材](https://unsplash.com/)\n\n### 在线工具\n\n#### 1. [文件格式转换](https://convertio.co/zh/)\n处理PDF、Word文件，OCR识别等很多工具，强大且全面，最关键的是免费\n\n#### 2. [专业的PDf处理工具](http://www.ilovepdf.com/)\n\n支持各种格式和PDf之间的转换\n\n#### 3. [文图](http://wentu.io/)\n数据可视化工具，而且支持数据源API接口。（ps：这个我还不怎么会用）\n\n#### 4. [icon图标制作](http://www.ico.la/)\n\n### Chrome插件（*以下插件均是免费的*）\n\n#### 1. 谷歌访问助手\n方便下载以下插件的前提是你要先科学上网，这个插件可以帮助你上Google下的搜索、应用商店、账号管理、Gmail等服务。而且是**免费的**。\n#### 2. Adblock Plus\n强大的广告拦截插件，某60口中的装机必备\n#### 3. Chrono下载管理器\n可替代Chrome自带的下载器，功能很强大\n#### 4. ColorZilla\n网页拾色器，可以提取文字，图片的颜色，看到一款好的配色就可以提取出来\n#### 5. Google翻译 \n不多说，看文档必需品\n#### 6. Momentum\n美化新建标签页，还可以添加简单的日程管理\n#### 7. Page Ruler\n量取、查看视图元素的大小\n#### 8. React Developer Tools\nReact调试工具\n#### 9. Search by Image\n一键谷歌搜图\n#### 10. 一键管理所以扩展\n下载的插件多了，就需要用这个插件进行管理\n#### 11. 网页截图:注释&批注\n相比较其他截图插件，这个算是比较强大的了，但是没有滚动截屏的功能\n#### 12. 阅读模式\n这个对于经常要看技术博客的人算是必需品吧，屏蔽掉影响阅读的广告栏\n\n### 时间管理\n#### 1. Manic Time\n记录电脑活动的窗口，可用于量化时间分配，审视自己的工作效率（强烈推荐）\n#### 2. Android下的 奇妙日程\n日程计划管理的App\n\n### 彩蛋\n一些有趣的工具\n#### 1. Tickeys\n让你找对Coding的感觉\n","slug":"工具集","published":1,"updated":"2017-01-15T09:54:35.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy89a3ar00082kofra3gvza7","content":"<p>原来一直在印象笔记上写笔记，感觉自己像是一个小水轮车，水流过来的时候能用的上，但是知识沉淀率太低，总是看的多，忘得多。</p>\n<p>后来看到这个<a href=\"https://www.zhihu.com/question/26865557\" target=\"_blank\" rel=\"external\">知乎问题</a>，觉得有必要开始总结，归纳，索引自己的知识和有用的资源。</p>\n<p>下面是总结的一些素材资源网站、在线工具、Chrome插件、益于时间管理的工具。作为找回资源的备份，本文会不断更新<br><a id=\"more\"></a></p>\n<h3 id=\"素材资源网站\"><a href=\"#素材资源网站\" class=\"headerlink\" title=\"素材资源网站\"></a>素材资源网站</h3><h4 id=\"1-阿里的矢量图标库\"><a href=\"#1-阿里的矢量图标库\" class=\"headerlink\" title=\"1. 阿里的矢量图标库\"></a>1. <a href=\"http://www.iconfont.cn/\" target=\"_blank\" rel=\"external\">阿里的矢量图标库</a></h4><p>丰富的图标可供下载，还可以选择自己想要的颜色，支持<code>SVG||PNG||AI</code>三种格式下载</p>\n<h4 id=\"2-WEB安全色\"><a href=\"#2-WEB安全色\" class=\"headerlink\" title=\"2. WEB安全色\"></a>2. <a href=\"http://www.bootcss.com/p/websafecolors/\" target=\"_blank\" rel=\"external\">WEB安全色</a></h4><p>Bootstrap中文网下的推荐配色方案</p>\n<h4 id=\"3-日系风格设计网站\"><a href=\"#3-日系风格设计网站\" class=\"headerlink\" title=\"3. 日系风格设计网站\"></a>3. <a href=\"http://bm.straightline.jp/\" target=\"_blank\" rel=\"external\">日系风格设计网站</a></h4><p>收录很多优质的网站设计</p>\n<h4 id=\"4-方便查询标签的设计网站\"><a href=\"#4-方便查询标签的设计网站\" class=\"headerlink\" title=\"4. 方便查询标签的设计网站\"></a>4. <a href=\"http://www.collectui.com/\" target=\"_blank\" rel=\"external\">方便查询标签的设计网站</a></h4><h4 id=\"5-免费的图片素材\"><a href=\"#5-免费的图片素材\" class=\"headerlink\" title=\"5. 免费的图片素材\"></a>5. <a href=\"https://unsplash.com/\" target=\"_blank\" rel=\"external\">免费的图片素材</a></h4><h3 id=\"在线工具\"><a href=\"#在线工具\" class=\"headerlink\" title=\"在线工具\"></a>在线工具</h3><h4 id=\"1-文件格式转换\"><a href=\"#1-文件格式转换\" class=\"headerlink\" title=\"1. 文件格式转换\"></a>1. <a href=\"https://convertio.co/zh/\" target=\"_blank\" rel=\"external\">文件格式转换</a></h4><p>处理PDF、Word文件，OCR识别等很多工具，强大且全面，最关键的是免费</p>\n<h4 id=\"2-专业的PDf处理工具\"><a href=\"#2-专业的PDf处理工具\" class=\"headerlink\" title=\"2. 专业的PDf处理工具\"></a>2. <a href=\"http://www.ilovepdf.com/\" target=\"_blank\" rel=\"external\">专业的PDf处理工具</a></h4><p>支持各种格式和PDf之间的转换</p>\n<h4 id=\"3-文图\"><a href=\"#3-文图\" class=\"headerlink\" title=\"3. 文图\"></a>3. <a href=\"http://wentu.io/\" target=\"_blank\" rel=\"external\">文图</a></h4><p>数据可视化工具，而且支持数据源API接口。（ps：这个我还不怎么会用）</p>\n<h4 id=\"4-icon图标制作\"><a href=\"#4-icon图标制作\" class=\"headerlink\" title=\"4. icon图标制作\"></a>4. <a href=\"http://www.ico.la/\" target=\"_blank\" rel=\"external\">icon图标制作</a></h4><h3 id=\"Chrome插件（以下插件均是免费的）\"><a href=\"#Chrome插件（以下插件均是免费的）\" class=\"headerlink\" title=\"Chrome插件（以下插件均是免费的）\"></a>Chrome插件（<em>以下插件均是免费的</em>）</h3><h4 id=\"1-谷歌访问助手\"><a href=\"#1-谷歌访问助手\" class=\"headerlink\" title=\"1. 谷歌访问助手\"></a>1. 谷歌访问助手</h4><p>方便下载以下插件的前提是你要先科学上网，这个插件可以帮助你上Google下的搜索、应用商店、账号管理、Gmail等服务。而且是<strong>免费的</strong>。</p>\n<h4 id=\"2-Adblock-Plus\"><a href=\"#2-Adblock-Plus\" class=\"headerlink\" title=\"2. Adblock Plus\"></a>2. Adblock Plus</h4><p>强大的广告拦截插件，某60口中的装机必备</p>\n<h4 id=\"3-Chrono下载管理器\"><a href=\"#3-Chrono下载管理器\" class=\"headerlink\" title=\"3. Chrono下载管理器\"></a>3. Chrono下载管理器</h4><p>可替代Chrome自带的下载器，功能很强大</p>\n<h4 id=\"4-ColorZilla\"><a href=\"#4-ColorZilla\" class=\"headerlink\" title=\"4. ColorZilla\"></a>4. ColorZilla</h4><p>网页拾色器，可以提取文字，图片的颜色，看到一款好的配色就可以提取出来</p>\n<h4 id=\"5-Google翻译\"><a href=\"#5-Google翻译\" class=\"headerlink\" title=\"5. Google翻译\"></a>5. Google翻译</h4><p>不多说，看文档必需品</p>\n<h4 id=\"6-Momentum\"><a href=\"#6-Momentum\" class=\"headerlink\" title=\"6. Momentum\"></a>6. Momentum</h4><p>美化新建标签页，还可以添加简单的日程管理</p>\n<h4 id=\"7-Page-Ruler\"><a href=\"#7-Page-Ruler\" class=\"headerlink\" title=\"7. Page Ruler\"></a>7. Page Ruler</h4><p>量取、查看视图元素的大小</p>\n<h4 id=\"8-React-Developer-Tools\"><a href=\"#8-React-Developer-Tools\" class=\"headerlink\" title=\"8. React Developer Tools\"></a>8. React Developer Tools</h4><p>React调试工具</p>\n<h4 id=\"9-Search-by-Image\"><a href=\"#9-Search-by-Image\" class=\"headerlink\" title=\"9. Search by Image\"></a>9. Search by Image</h4><p>一键谷歌搜图</p>\n<h4 id=\"10-一键管理所以扩展\"><a href=\"#10-一键管理所以扩展\" class=\"headerlink\" title=\"10. 一键管理所以扩展\"></a>10. 一键管理所以扩展</h4><p>下载的插件多了，就需要用这个插件进行管理</p>\n<h4 id=\"11-网页截图-注释-amp-批注\"><a href=\"#11-网页截图-注释-amp-批注\" class=\"headerlink\" title=\"11. 网页截图:注释&amp;批注\"></a>11. 网页截图:注释&amp;批注</h4><p>相比较其他截图插件，这个算是比较强大的了，但是没有滚动截屏的功能</p>\n<h4 id=\"12-阅读模式\"><a href=\"#12-阅读模式\" class=\"headerlink\" title=\"12. 阅读模式\"></a>12. 阅读模式</h4><p>这个对于经常要看技术博客的人算是必需品吧，屏蔽掉影响阅读的广告栏</p>\n<h3 id=\"时间管理\"><a href=\"#时间管理\" class=\"headerlink\" title=\"时间管理\"></a>时间管理</h3><h4 id=\"1-Manic-Time\"><a href=\"#1-Manic-Time\" class=\"headerlink\" title=\"1. Manic Time\"></a>1. Manic Time</h4><p>记录电脑活动的窗口，可用于量化时间分配，审视自己的工作效率（强烈推荐）</p>\n<h4 id=\"2-Android下的-奇妙日程\"><a href=\"#2-Android下的-奇妙日程\" class=\"headerlink\" title=\"2. Android下的 奇妙日程\"></a>2. Android下的 奇妙日程</h4><p>日程计划管理的App</p>\n<h3 id=\"彩蛋\"><a href=\"#彩蛋\" class=\"headerlink\" title=\"彩蛋\"></a>彩蛋</h3><p>一些有趣的工具</p>\n<h4 id=\"1-Tickeys\"><a href=\"#1-Tickeys\" class=\"headerlink\" title=\"1. Tickeys\"></a>1. Tickeys</h4><p>让你找对Coding的感觉</p>\n","excerpt":"<p>原来一直在印象笔记上写笔记，感觉自己像是一个小水轮车，水流过来的时候能用的上，但是知识沉淀率太低，总是看的多，忘得多。</p>\n<p>后来看到这个<a href=\"https://www.zhihu.com/question/26865557\">知乎问题</a>，觉得有必要开始总结，归纳，索引自己的知识和有用的资源。</p>\n<p>下面是总结的一些素材资源网站、在线工具、Chrome插件、益于时间管理的工具。作为找回资源的备份，本文会不断更新<br>","more":"</p>\n<h3 id=\"素材资源网站\"><a href=\"#素材资源网站\" class=\"headerlink\" title=\"素材资源网站\"></a>素材资源网站</h3><h4 id=\"1-阿里的矢量图标库\"><a href=\"#1-阿里的矢量图标库\" class=\"headerlink\" title=\"1. 阿里的矢量图标库\"></a>1. <a href=\"http://www.iconfont.cn/\">阿里的矢量图标库</a></h4><p>丰富的图标可供下载，还可以选择自己想要的颜色，支持<code>SVG||PNG||AI</code>三种格式下载</p>\n<h4 id=\"2-WEB安全色\"><a href=\"#2-WEB安全色\" class=\"headerlink\" title=\"2. WEB安全色\"></a>2. <a href=\"http://www.bootcss.com/p/websafecolors/\">WEB安全色</a></h4><p>Bootstrap中文网下的推荐配色方案</p>\n<h4 id=\"3-日系风格设计网站\"><a href=\"#3-日系风格设计网站\" class=\"headerlink\" title=\"3. 日系风格设计网站\"></a>3. <a href=\"http://bm.straightline.jp/\">日系风格设计网站</a></h4><p>收录很多优质的网站设计</p>\n<h4 id=\"4-方便查询标签的设计网站\"><a href=\"#4-方便查询标签的设计网站\" class=\"headerlink\" title=\"4. 方便查询标签的设计网站\"></a>4. <a href=\"http://www.collectui.com/\">方便查询标签的设计网站</a></h4><h4 id=\"5-免费的图片素材\"><a href=\"#5-免费的图片素材\" class=\"headerlink\" title=\"5. 免费的图片素材\"></a>5. <a href=\"https://unsplash.com/\">免费的图片素材</a></h4><h3 id=\"在线工具\"><a href=\"#在线工具\" class=\"headerlink\" title=\"在线工具\"></a>在线工具</h3><h4 id=\"1-文件格式转换\"><a href=\"#1-文件格式转换\" class=\"headerlink\" title=\"1. 文件格式转换\"></a>1. <a href=\"https://convertio.co/zh/\">文件格式转换</a></h4><p>处理PDF、Word文件，OCR识别等很多工具，强大且全面，最关键的是免费</p>\n<h4 id=\"2-专业的PDf处理工具\"><a href=\"#2-专业的PDf处理工具\" class=\"headerlink\" title=\"2. 专业的PDf处理工具\"></a>2. <a href=\"http://www.ilovepdf.com/\">专业的PDf处理工具</a></h4><p>支持各种格式和PDf之间的转换</p>\n<h4 id=\"3-文图\"><a href=\"#3-文图\" class=\"headerlink\" title=\"3. 文图\"></a>3. <a href=\"http://wentu.io/\">文图</a></h4><p>数据可视化工具，而且支持数据源API接口。（ps：这个我还不怎么会用）</p>\n<h4 id=\"4-icon图标制作\"><a href=\"#4-icon图标制作\" class=\"headerlink\" title=\"4. icon图标制作\"></a>4. <a href=\"http://www.ico.la/\">icon图标制作</a></h4><h3 id=\"Chrome插件（以下插件均是免费的）\"><a href=\"#Chrome插件（以下插件均是免费的）\" class=\"headerlink\" title=\"Chrome插件（以下插件均是免费的）\"></a>Chrome插件（<em>以下插件均是免费的</em>）</h3><h4 id=\"1-谷歌访问助手\"><a href=\"#1-谷歌访问助手\" class=\"headerlink\" title=\"1. 谷歌访问助手\"></a>1. 谷歌访问助手</h4><p>方便下载以下插件的前提是你要先科学上网，这个插件可以帮助你上Google下的搜索、应用商店、账号管理、Gmail等服务。而且是<strong>免费的</strong>。</p>\n<h4 id=\"2-Adblock-Plus\"><a href=\"#2-Adblock-Plus\" class=\"headerlink\" title=\"2. Adblock Plus\"></a>2. Adblock Plus</h4><p>强大的广告拦截插件，某60口中的装机必备</p>\n<h4 id=\"3-Chrono下载管理器\"><a href=\"#3-Chrono下载管理器\" class=\"headerlink\" title=\"3. Chrono下载管理器\"></a>3. Chrono下载管理器</h4><p>可替代Chrome自带的下载器，功能很强大</p>\n<h4 id=\"4-ColorZilla\"><a href=\"#4-ColorZilla\" class=\"headerlink\" title=\"4. ColorZilla\"></a>4. ColorZilla</h4><p>网页拾色器，可以提取文字，图片的颜色，看到一款好的配色就可以提取出来</p>\n<h4 id=\"5-Google翻译\"><a href=\"#5-Google翻译\" class=\"headerlink\" title=\"5. Google翻译\"></a>5. Google翻译</h4><p>不多说，看文档必需品</p>\n<h4 id=\"6-Momentum\"><a href=\"#6-Momentum\" class=\"headerlink\" title=\"6. Momentum\"></a>6. Momentum</h4><p>美化新建标签页，还可以添加简单的日程管理</p>\n<h4 id=\"7-Page-Ruler\"><a href=\"#7-Page-Ruler\" class=\"headerlink\" title=\"7. Page Ruler\"></a>7. Page Ruler</h4><p>量取、查看视图元素的大小</p>\n<h4 id=\"8-React-Developer-Tools\"><a href=\"#8-React-Developer-Tools\" class=\"headerlink\" title=\"8. React Developer Tools\"></a>8. React Developer Tools</h4><p>React调试工具</p>\n<h4 id=\"9-Search-by-Image\"><a href=\"#9-Search-by-Image\" class=\"headerlink\" title=\"9. Search by Image\"></a>9. Search by Image</h4><p>一键谷歌搜图</p>\n<h4 id=\"10-一键管理所以扩展\"><a href=\"#10-一键管理所以扩展\" class=\"headerlink\" title=\"10. 一键管理所以扩展\"></a>10. 一键管理所以扩展</h4><p>下载的插件多了，就需要用这个插件进行管理</p>\n<h4 id=\"11-网页截图-注释-amp-批注\"><a href=\"#11-网页截图-注释-amp-批注\" class=\"headerlink\" title=\"11. 网页截图:注释&amp;批注\"></a>11. 网页截图:注释&amp;批注</h4><p>相比较其他截图插件，这个算是比较强大的了，但是没有滚动截屏的功能</p>\n<h4 id=\"12-阅读模式\"><a href=\"#12-阅读模式\" class=\"headerlink\" title=\"12. 阅读模式\"></a>12. 阅读模式</h4><p>这个对于经常要看技术博客的人算是必需品吧，屏蔽掉影响阅读的广告栏</p>\n<h3 id=\"时间管理\"><a href=\"#时间管理\" class=\"headerlink\" title=\"时间管理\"></a>时间管理</h3><h4 id=\"1-Manic-Time\"><a href=\"#1-Manic-Time\" class=\"headerlink\" title=\"1. Manic Time\"></a>1. Manic Time</h4><p>记录电脑活动的窗口，可用于量化时间分配，审视自己的工作效率（强烈推荐）</p>\n<h4 id=\"2-Android下的-奇妙日程\"><a href=\"#2-Android下的-奇妙日程\" class=\"headerlink\" title=\"2. Android下的 奇妙日程\"></a>2. Android下的 奇妙日程</h4><p>日程计划管理的App</p>\n<h3 id=\"彩蛋\"><a href=\"#彩蛋\" class=\"headerlink\" title=\"彩蛋\"></a>彩蛋</h3><p>一些有趣的工具</p>\n<h4 id=\"1-Tickeys\"><a href=\"#1-Tickeys\" class=\"headerlink\" title=\"1. Tickeys\"></a>1. Tickeys</h4><p>让你找对Coding的感觉</p>"},{"title":"高级程序设计（第三版）笔记","date":"2017-01-18T04:43:13.000Z","_content":"\n本文是第二遍系统的读高级程序语言设计（第三版）时的笔记，包括\n\n- 平时用的比较少，记忆不深刻的方法API\n- 结合写代码中遇到的坑与书中知识点的印证（主要是原型和构造对象模式的知识点）\n- 笔记没有追求全面，只是对于知识点查漏补缺的索引\n\n<!-- more -->\n\n## Object [ prop ]和Object.prop的区别\n\n 1. 语法方面的区别 点表示法的对象的属性名是标识符，而后者的属性名则是一个字符串。\n 2. 灵活性方面的区别 在JavaScript编写程序中，可以为对象创建任意数目的属性。但使用\".\"运算符来存取一个对象的属性时，属性名是用标识符表示的。而在JavaScript程序中，标识符必须被逐字地输入，它们不是一种数据类型，因此程序不能对其操作。也就是说，标识符是静态的，在程序中必须对其进行硬编码。 而使用数组[]表示法来存取一个对象的属性时，属性名是用字符串表示的。字符串是JavaScript的一种数据类型，因此可以在程序运行中操作并创建它们。\n 3. 性能方面区别 数组[]表示法在存取属性值时会进行表达式运行。而点表示法是直接存取属性值，理论上执行效率会比数组表示法高。性能方面其实可以忽略。 某些场景必须用到数组表示法来动态存取属性值，这个是点表示法无法做到的。\n\n  ```js\n  var prop='name',object={name:'dasda'};\n         console.log(object[prop]);  //dasda\n         console.log(object.prop);   //undefined\n  ```\n\n 4. 总的来说，这两种方法区别上不大，都有对应的使用场景。点表示法一般作为静态对象使用时来存取属性。而数组表示法在动态存取属性时就非常有用。\n\n## arguments和命名参数单向同步\n\n```javascript\nfunction add(num1,num2){\n          arguments[1]=10;\n          alert(arguments[0]+num2);\n     }\n```\n\n- 执行add（）会重写第二个参数，arguments对象中的值会自动反应到命名参数，但这是单向的，也就是改变命名参数的值但是arguments对象中的值不会改变，\n- 严格模式中不能设置argumengts对象的值\n\n  ### typeof和instanceof\n\n- 因为typeof检测引用类型值时，不同浏览器会有不同的结果，所以推荐只用typeof检测基本数据类型，检测值是否存在\n- instanceof\n\n  - 语法 person instanceof Object\n  - 用来检测引用类型\n\n## Array类型的方法\n\n### Array.isArray()方法\n\n- 解决多个全局执行环境时（多个框架），Array构造函数不同，instanceof你能正确检测对象是不是数组的问题\n- 支持该方法的浏览器：IE9+、Firefox4+、Safari 5+、Opera 10.5+和Chrome\n\n### Array.sort()\n\n- 无论数组项是不是数值，都会调用每一项的tostring（）方法，然后比较字符串。\n\n  ```javascript\n  var values=[0,1,5,10,15];\n  alert(values.sort()); //0,1,10,15,5\n  ```\n\n- sort()方法可以传一个比较函数，比较函数接受两个参数（a，b），a>b 返回1，a< b,返回-1，相等返回0。\n\n  ```javascript\n  function compare(a,b){\n    if(a >b ){\n        return 1;\n    }else if (a < b ){\n        return -1;\n    }else{\n        return 0;\n    }\n  }\n  ```\n\n### slice()方法\n\n- slice(startIndex,endIndex)\n- 返回起始到结束位置之间的项，不包括结束位置,只传入一个参数时，返回索引位置到结束的所有项\n- 不会影响原数组\n\n  ```javascript\n  var value=[1,5,7,3,8,2];\n  var value1=value.slice(2,5);\n  var value2=value.slice(2);\n  alert(value1,'$$$$$'+value2);  //7,3,8$$$$$7,3,8,2\n  ```\n\n### splice()方法\n\n- splice(startIndex,count,item) //(起始位置，项数，插入项）\n- 返回删除的项\n\n  ```javascript\n  var value=[1,5,7,3,8,2] ;\n  alert(value.splice(2,1,1,2,3)); // 7\n  alert(value); // 1,5,1,2,3,3,8,2\n  ```\n\n### indexOf()和lastIndexOf()方法\n\n- indexof(item,startIndex)||lastIndexOf(item,startIndex) // (项的值,起始位置）\n- 查找比较时使用全等操作符\n\n  ```javascript\n  var value=[1,5,7,3,5,8,2];\n  alert(value.indexOf(5)); //1\n  alert(value.lastIndexOf(5)); //4\n  alert(value.indexOf(5,2)); //4\n  alert(value.lastIndexOf(5,3)) //1\n  ```\n\n### every()和some()方法\n\n- every(fn)，传入函数对**每一**项都返回`true`，这个方法返回`true`\n- some(fn),传入函数对**任一**项返回`true`，这个方法就返回`true`\n\n### filter()\n\n- filter(fn)\n- 返回该函数会返回`true`的项组成的数组\n\n### forEach()和map()方法\n\n- forEach(item,index,array) || map(item,index,array)\n- forEach没有返回值,map会返回一个每一项执行函数后返回的值组成的数组\n\n  ```javascript\n  var arr1=[1,5,9,43,65,7];\n    var arrMap=arr1.map(function (item,index,array){\n        return item*2\n    });\n    alert(arrMap);//2,10,18,86,130,14\n    alert(arr1);//1,5,9,43,65,7\n    var arrFor=arr1.forEach(function(item,index,array){\n        return item*2\n    });\n    alert(arrFor);//undefined\n    alert(arr1);//1,5,9,43,65,7\n  ```\n\n## string\n\n### trim()、trimLeft()、trimRight()方法\n\n- trim()返回删除前置和后缀空格以后的String副本，对原数据无改变\n- trimLeft(),trimRight()分别删除前置和后缀空格\n\n## 面向对象的程序设计\n\n面向对象的程序设计中的描述符等暂时想不到哪里能用到，用到再精读。这里说一下遇到的一个，如下\n\n```javascript\nfunction Pig() {\n}\nPig.prototype = {\n\n    init: function () {\n    },\n    move: function () {\n    },\n    render: function () {\n        this.move();\n        console.log(this)\n    }\n};\nvar pigPlayer=new Pig();\nsetInterval(pigPlayer.render.bind(pigPlayer),1000);\n```\n\n重写原型时会造成`Pig.prototype.constructor===Pig//false`,而像下面重写会造成`constructor`变为可枚举属性。记一下这个坑，非要爬坑详见高程P155.\n\n```js\nPig.prototype = {\n\n    constructor:Pig,\n\n    init: function () {\n    },\n    move: function () {\n    },\n    render: function () {\n        this.move();\n        console.log(this)\n    }\n};\n```\n\n### 原型链\n\n这里只说一个我第一次接触时的误区，**构造函数创建的实例中是没有`prototype`这个属性的，只有`_proto_`,所以本质上我们所说的实例的原型是构造器函数的原型**，如下\n\n```javascript\nvar Yo=function () {\n            this.name='ddd'\n        };\n        var yo=new Yo;\n        console.dir(yo);\n        //Yo  \n        //展开后    //name:'ddd'\n                //_proto_:Object\n        console.dir(Yo)\n        //function Yo()\n       //展开后  //arguments:null\n                //caller:null\n                //length:0\n                //name:\"Yo\"\n                //prototype:Object\n                //__proto__:()\n                //[[FunctionLocation]]:test.html:22\n                //[[Scopes]]:Scopes[1]\n    }\n```\n\n对于这部分更详细的内容，直接细看这一章\n\n## 方法\n\n### number<>string\n\n- parseInt（string，进制数） `parseInt（‘11dsad’，10）>>>11`\n\n- toString() Number>>>String时可传参数（进制数） `10.toString(2)>>>'1010'`\n\n### array<>string\n\n- `arr.join(param)` @param 分隔符 String格式\n- `string.split(param) @param 识别分隔符 String格式\n\n  ```javascript\n  var a='hello',b='llohe';\n     var isTrue=()=>a.split('').sort()===b.split('').sort()?true:false;\n     isTrue();// true\n  ```\n\n### for-in语句\n\n- 枚举对象属性\n\n  ```javascript\nfor(var prop in Object){\n          do something...\n     {\n  ```\n\n\n\n### switch的有趣用法\n\n\n\n  ```javascript\nvar num=25;\n     switch(true){\n          case num<0:break;\n          case num>0:break;\n          default:break;\n     }\n  ```\n\n- switch语句中 默认使用全等符 `===`\n","source":"_posts/高程笔记.md","raw":"---\ntitle: 高级程序设计（第三版）笔记\ndate: 2017-01-18T12:43:13.000Z\ncategories:\n  - JavaScript\ntags:\n  - JavaScript\n  - 读书\n---\n\n本文是第二遍系统的读高级程序语言设计（第三版）时的笔记，包括\n\n- 平时用的比较少，记忆不深刻的方法API\n- 结合写代码中遇到的坑与书中知识点的印证（主要是原型和构造对象模式的知识点）\n- 笔记没有追求全面，只是对于知识点查漏补缺的索引\n\n<!-- more -->\n\n## Object [ prop ]和Object.prop的区别\n\n 1. 语法方面的区别 点表示法的对象的属性名是标识符，而后者的属性名则是一个字符串。\n 2. 灵活性方面的区别 在JavaScript编写程序中，可以为对象创建任意数目的属性。但使用\".\"运算符来存取一个对象的属性时，属性名是用标识符表示的。而在JavaScript程序中，标识符必须被逐字地输入，它们不是一种数据类型，因此程序不能对其操作。也就是说，标识符是静态的，在程序中必须对其进行硬编码。 而使用数组[]表示法来存取一个对象的属性时，属性名是用字符串表示的。字符串是JavaScript的一种数据类型，因此可以在程序运行中操作并创建它们。\n 3. 性能方面区别 数组[]表示法在存取属性值时会进行表达式运行。而点表示法是直接存取属性值，理论上执行效率会比数组表示法高。性能方面其实可以忽略。 某些场景必须用到数组表示法来动态存取属性值，这个是点表示法无法做到的。\n\n  ```js\n  var prop='name',object={name:'dasda'};\n         console.log(object[prop]);  //dasda\n         console.log(object.prop);   //undefined\n  ```\n\n 4. 总的来说，这两种方法区别上不大，都有对应的使用场景。点表示法一般作为静态对象使用时来存取属性。而数组表示法在动态存取属性时就非常有用。\n\n## arguments和命名参数单向同步\n\n```javascript\nfunction add(num1,num2){\n          arguments[1]=10;\n          alert(arguments[0]+num2);\n     }\n```\n\n- 执行add（）会重写第二个参数，arguments对象中的值会自动反应到命名参数，但这是单向的，也就是改变命名参数的值但是arguments对象中的值不会改变，\n- 严格模式中不能设置argumengts对象的值\n\n  ### typeof和instanceof\n\n- 因为typeof检测引用类型值时，不同浏览器会有不同的结果，所以推荐只用typeof检测基本数据类型，检测值是否存在\n- instanceof\n\n  - 语法 person instanceof Object\n  - 用来检测引用类型\n\n## Array类型的方法\n\n### Array.isArray()方法\n\n- 解决多个全局执行环境时（多个框架），Array构造函数不同，instanceof你能正确检测对象是不是数组的问题\n- 支持该方法的浏览器：IE9+、Firefox4+、Safari 5+、Opera 10.5+和Chrome\n\n### Array.sort()\n\n- 无论数组项是不是数值，都会调用每一项的tostring（）方法，然后比较字符串。\n\n  ```javascript\n  var values=[0,1,5,10,15];\n  alert(values.sort()); //0,1,10,15,5\n  ```\n\n- sort()方法可以传一个比较函数，比较函数接受两个参数（a，b），a>b 返回1，a< b,返回-1，相等返回0。\n\n  ```javascript\n  function compare(a,b){\n    if(a >b ){\n        return 1;\n    }else if (a < b ){\n        return -1;\n    }else{\n        return 0;\n    }\n  }\n  ```\n\n### slice()方法\n\n- slice(startIndex,endIndex)\n- 返回起始到结束位置之间的项，不包括结束位置,只传入一个参数时，返回索引位置到结束的所有项\n- 不会影响原数组\n\n  ```javascript\n  var value=[1,5,7,3,8,2];\n  var value1=value.slice(2,5);\n  var value2=value.slice(2);\n  alert(value1,'$$$$$'+value2);  //7,3,8$$$$$7,3,8,2\n  ```\n\n### splice()方法\n\n- splice(startIndex,count,item) //(起始位置，项数，插入项）\n- 返回删除的项\n\n  ```javascript\n  var value=[1,5,7,3,8,2] ;\n  alert(value.splice(2,1,1,2,3)); // 7\n  alert(value); // 1,5,1,2,3,3,8,2\n  ```\n\n### indexOf()和lastIndexOf()方法\n\n- indexof(item,startIndex)||lastIndexOf(item,startIndex) // (项的值,起始位置）\n- 查找比较时使用全等操作符\n\n  ```javascript\n  var value=[1,5,7,3,5,8,2];\n  alert(value.indexOf(5)); //1\n  alert(value.lastIndexOf(5)); //4\n  alert(value.indexOf(5,2)); //4\n  alert(value.lastIndexOf(5,3)) //1\n  ```\n\n### every()和some()方法\n\n- every(fn)，传入函数对**每一**项都返回`true`，这个方法返回`true`\n- some(fn),传入函数对**任一**项返回`true`，这个方法就返回`true`\n\n### filter()\n\n- filter(fn)\n- 返回该函数会返回`true`的项组成的数组\n\n### forEach()和map()方法\n\n- forEach(item,index,array) || map(item,index,array)\n- forEach没有返回值,map会返回一个每一项执行函数后返回的值组成的数组\n\n  ```javascript\n  var arr1=[1,5,9,43,65,7];\n    var arrMap=arr1.map(function (item,index,array){\n        return item*2\n    });\n    alert(arrMap);//2,10,18,86,130,14\n    alert(arr1);//1,5,9,43,65,7\n    var arrFor=arr1.forEach(function(item,index,array){\n        return item*2\n    });\n    alert(arrFor);//undefined\n    alert(arr1);//1,5,9,43,65,7\n  ```\n\n## string\n\n### trim()、trimLeft()、trimRight()方法\n\n- trim()返回删除前置和后缀空格以后的String副本，对原数据无改变\n- trimLeft(),trimRight()分别删除前置和后缀空格\n\n## 面向对象的程序设计\n\n面向对象的程序设计中的描述符等暂时想不到哪里能用到，用到再精读。这里说一下遇到的一个，如下\n\n```javascript\nfunction Pig() {\n}\nPig.prototype = {\n\n    init: function () {\n    },\n    move: function () {\n    },\n    render: function () {\n        this.move();\n        console.log(this)\n    }\n};\nvar pigPlayer=new Pig();\nsetInterval(pigPlayer.render.bind(pigPlayer),1000);\n```\n\n重写原型时会造成`Pig.prototype.constructor===Pig//false`,而像下面重写会造成`constructor`变为可枚举属性。记一下这个坑，非要爬坑详见高程P155.\n\n```js\nPig.prototype = {\n\n    constructor:Pig,\n\n    init: function () {\n    },\n    move: function () {\n    },\n    render: function () {\n        this.move();\n        console.log(this)\n    }\n};\n```\n\n### 原型链\n\n这里只说一个我第一次接触时的误区，**构造函数创建的实例中是没有`prototype`这个属性的，只有`_proto_`,所以本质上我们所说的实例的原型是构造器函数的原型**，如下\n\n```javascript\nvar Yo=function () {\n            this.name='ddd'\n        };\n        var yo=new Yo;\n        console.dir(yo);\n        //Yo  \n        //展开后    //name:'ddd'\n                //_proto_:Object\n        console.dir(Yo)\n        //function Yo()\n       //展开后  //arguments:null\n                //caller:null\n                //length:0\n                //name:\"Yo\"\n                //prototype:Object\n                //__proto__:()\n                //[[FunctionLocation]]:test.html:22\n                //[[Scopes]]:Scopes[1]\n    }\n```\n\n对于这部分更详细的内容，直接细看这一章\n\n## 方法\n\n### number<>string\n\n- parseInt（string，进制数） `parseInt（‘11dsad’，10）>>>11`\n\n- toString() Number>>>String时可传参数（进制数） `10.toString(2)>>>'1010'`\n\n### array<>string\n\n- `arr.join(param)` @param 分隔符 String格式\n- `string.split(param) @param 识别分隔符 String格式\n\n  ```javascript\n  var a='hello',b='llohe';\n     var isTrue=()=>a.split('').sort()===b.split('').sort()?true:false;\n     isTrue();// true\n  ```\n\n### for-in语句\n\n- 枚举对象属性\n\n  ```javascript\nfor(var prop in Object){\n          do something...\n     {\n  ```\n\n\n\n### switch的有趣用法\n\n\n\n  ```javascript\nvar num=25;\n     switch(true){\n          case num<0:break;\n          case num>0:break;\n          default:break;\n     }\n  ```\n\n- switch语句中 默认使用全等符 `===`\n","slug":"高程笔记","published":1,"updated":"2017-01-21T04:56:35.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciy89a3b100092kofwr4rb4hr","content":"<p>本文是第二遍系统的读高级程序语言设计（第三版）时的笔记，包括</p>\n<ul>\n<li>平时用的比较少，记忆不深刻的方法API</li>\n<li>结合写代码中遇到的坑与书中知识点的印证（主要是原型和构造对象模式的知识点）</li>\n<li>笔记没有追求全面，只是对于知识点查漏补缺的索引</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Object-prop-和Object-prop的区别\"><a href=\"#Object-prop-和Object-prop的区别\" class=\"headerlink\" title=\"Object [ prop ]和Object.prop的区别\"></a>Object [ prop ]和Object.prop的区别</h2><ol>\n<li>语法方面的区别 点表示法的对象的属性名是标识符，而后者的属性名则是一个字符串。</li>\n<li>灵活性方面的区别 在JavaScript编写程序中，可以为对象创建任意数目的属性。但使用”.”运算符来存取一个对象的属性时，属性名是用标识符表示的。而在JavaScript程序中，标识符必须被逐字地输入，它们不是一种数据类型，因此程序不能对其操作。也就是说，标识符是静态的，在程序中必须对其进行硬编码。 而使用数组[]表示法来存取一个对象的属性时，属性名是用字符串表示的。字符串是JavaScript的一种数据类型，因此可以在程序运行中操作并创建它们。</li>\n<li><p>性能方面区别 数组[]表示法在存取属性值时会进行表达式运行。而点表示法是直接存取属性值，理论上执行效率会比数组表示法高。性能方面其实可以忽略。 某些场景必须用到数组表示法来动态存取属性值，这个是点表示法无法做到的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> prop=<span class=\"string\">'name'</span>,object=&#123;<span class=\"attr\">name</span>:<span class=\"string\">'dasda'</span>&#125;;</div><div class=\"line\">       <span class=\"built_in\">console</span>.log(object[prop]);  <span class=\"comment\">//dasda</span></div><div class=\"line\">       <span class=\"built_in\">console</span>.log(object.prop);   <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>总的来说，这两种方法区别上不大，都有对应的使用场景。点表示法一般作为静态对象使用时来存取属性。而数组表示法在动态存取属性时就非常有用。</p>\n</li>\n</ol>\n<h2 id=\"arguments和命名参数单向同步\"><a href=\"#arguments和命名参数单向同步\" class=\"headerlink\" title=\"arguments和命名参数单向同步\"></a>arguments和命名参数单向同步</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</div><div class=\"line\">          <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]=<span class=\"number\">10</span>;</div><div class=\"line\">          alert(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]+num2);</div><div class=\"line\">     &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>执行add（）会重写第二个参数，arguments对象中的值会自动反应到命名参数，但这是单向的，也就是改变命名参数的值但是arguments对象中的值不会改变，</li>\n<li><p>严格模式中不能设置argumengts对象的值</p>\n<h3 id=\"typeof和instanceof\"><a href=\"#typeof和instanceof\" class=\"headerlink\" title=\"typeof和instanceof\"></a>typeof和instanceof</h3></li>\n<li><p>因为typeof检测引用类型值时，不同浏览器会有不同的结果，所以推荐只用typeof检测基本数据类型，检测值是否存在</p>\n</li>\n<li><p>instanceof</p>\n<ul>\n<li>语法 person instanceof Object</li>\n<li>用来检测引用类型</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Array类型的方法\"><a href=\"#Array类型的方法\" class=\"headerlink\" title=\"Array类型的方法\"></a>Array类型的方法</h2><h3 id=\"Array-isArray-方法\"><a href=\"#Array-isArray-方法\" class=\"headerlink\" title=\"Array.isArray()方法\"></a>Array.isArray()方法</h3><ul>\n<li>解决多个全局执行环境时（多个框架），Array构造函数不同，instanceof你能正确检测对象是不是数组的问题</li>\n<li>支持该方法的浏览器：IE9+、Firefox4+、Safari 5+、Opera 10.5+和Chrome</li>\n</ul>\n<h3 id=\"Array-sort\"><a href=\"#Array-sort\" class=\"headerlink\" title=\"Array.sort()\"></a>Array.sort()</h3><ul>\n<li><p>无论数组项是不是数值，都会调用每一项的tostring（）方法，然后比较字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> values=[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</div><div class=\"line\">alert(values.sort()); <span class=\"comment\">//0,1,10,15,5</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>sort()方法可以传一个比较函数，比较函数接受两个参数（a，b），a&gt;b 返回1，a&lt; b,返回-1，相等返回0。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(a &gt;b )&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a &lt; b )&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"slice-方法\"><a href=\"#slice-方法\" class=\"headerlink\" title=\"slice()方法\"></a>slice()方法</h3><ul>\n<li>slice(startIndex,endIndex)</li>\n<li>返回起始到结束位置之间的项，不包括结束位置,只传入一个参数时，返回索引位置到结束的所有项</li>\n<li><p>不会影响原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> value=[<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> value1=value.slice(<span class=\"number\">2</span>,<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> value2=value.slice(<span class=\"number\">2</span>);</div><div class=\"line\">alert(value1,<span class=\"string\">'$$$$$'</span>+value2);  <span class=\"comment\">//7,3,8$$$$$7,3,8,2</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"splice-方法\"><a href=\"#splice-方法\" class=\"headerlink\" title=\"splice()方法\"></a>splice()方法</h3><ul>\n<li>splice(startIndex,count,item) //(起始位置，项数，插入项）</li>\n<li><p>返回删除的项</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> value=[<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>] ;</div><div class=\"line\">alert(value.splice(<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)); <span class=\"comment\">// 7</span></div><div class=\"line\">alert(value); <span class=\"comment\">// 1,5,1,2,3,3,8,2</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"indexOf-和lastIndexOf-方法\"><a href=\"#indexOf-和lastIndexOf-方法\" class=\"headerlink\" title=\"indexOf()和lastIndexOf()方法\"></a>indexOf()和lastIndexOf()方法</h3><ul>\n<li>indexof(item,startIndex)||lastIndexOf(item,startIndex) // (项的值,起始位置）</li>\n<li><p>查找比较时使用全等操作符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> value=[<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>];</div><div class=\"line\">alert(value.indexOf(<span class=\"number\">5</span>)); <span class=\"comment\">//1</span></div><div class=\"line\">alert(value.lastIndexOf(<span class=\"number\">5</span>)); <span class=\"comment\">//4</span></div><div class=\"line\">alert(value.indexOf(<span class=\"number\">5</span>,<span class=\"number\">2</span>)); <span class=\"comment\">//4</span></div><div class=\"line\">alert(value.lastIndexOf(<span class=\"number\">5</span>,<span class=\"number\">3</span>)) <span class=\"comment\">//1</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"every-和some-方法\"><a href=\"#every-和some-方法\" class=\"headerlink\" title=\"every()和some()方法\"></a>every()和some()方法</h3><ul>\n<li>every(fn)，传入函数对<strong>每一</strong>项都返回<code>true</code>，这个方法返回<code>true</code></li>\n<li>some(fn),传入函数对<strong>任一</strong>项返回<code>true</code>，这个方法就返回<code>true</code></li>\n</ul>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h3><ul>\n<li>filter(fn)</li>\n<li>返回该函数会返回<code>true</code>的项组成的数组</li>\n</ul>\n<h3 id=\"forEach-和map-方法\"><a href=\"#forEach-和map-方法\" class=\"headerlink\" title=\"forEach()和map()方法\"></a>forEach()和map()方法</h3><ul>\n<li>forEach(item,index,array) || map(item,index,array)</li>\n<li><p>forEach没有返回值,map会返回一个每一项执行函数后返回的值组成的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr1=[<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">43</span>,<span class=\"number\">65</span>,<span class=\"number\">7</span>];</div><div class=\"line\">  <span class=\"keyword\">var</span> arrMap=arr1.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item,index,array</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> item*<span class=\"number\">2</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">  alert(arrMap);<span class=\"comment\">//2,10,18,86,130,14</span></div><div class=\"line\">  alert(arr1);<span class=\"comment\">//1,5,9,43,65,7</span></div><div class=\"line\">  <span class=\"keyword\">var</span> arrFor=arr1.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index,array</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> item*<span class=\"number\">2</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">  alert(arrFor);<span class=\"comment\">//undefined</span></div><div class=\"line\">  alert(arr1);<span class=\"comment\">//1,5,9,43,65,7</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h2><h3 id=\"trim-、trimLeft-、trimRight-方法\"><a href=\"#trim-、trimLeft-、trimRight-方法\" class=\"headerlink\" title=\"trim()、trimLeft()、trimRight()方法\"></a>trim()、trimLeft()、trimRight()方法</h3><ul>\n<li>trim()返回删除前置和后缀空格以后的String副本，对原数据无改变</li>\n<li>trimLeft(),trimRight()分别删除前置和后缀空格</li>\n</ul>\n<h2 id=\"面向对象的程序设计\"><a href=\"#面向对象的程序设计\" class=\"headerlink\" title=\"面向对象的程序设计\"></a>面向对象的程序设计</h2><p>面向对象的程序设计中的描述符等暂时想不到哪里能用到，用到再精读。这里说一下遇到的一个，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Pig</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Pig.prototype = &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">move</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.move();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> pigPlayer=<span class=\"keyword\">new</span> Pig();</div><div class=\"line\">setInterval(pigPlayer.render.bind(pigPlayer),<span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p>重写原型时会造成<code>Pig.prototype.constructor===Pig//false</code>,而像下面重写会造成<code>constructor</code>变为可枚举属性。记一下这个坑，非要爬坑详见高程P155.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Pig.prototype = &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">constructor</span>:Pig,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">move</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.move();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><p>这里只说一个我第一次接触时的误区，<strong>构造函数创建的实例中是没有<code>prototype</code>这个属性的，只有<code>_proto_</code>,所以本质上我们所说的实例的原型是构造器函数的原型</strong>，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Yo=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name=<span class=\"string\">'ddd'</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">var</span> yo=<span class=\"keyword\">new</span> Yo;</div><div class=\"line\">        <span class=\"built_in\">console</span>.dir(yo);</div><div class=\"line\">        <span class=\"comment\">//Yo  </span></div><div class=\"line\">        <span class=\"comment\">//展开后    //name:'ddd'</span></div><div class=\"line\">                <span class=\"comment\">//_proto_:Object</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.dir(Yo)</div><div class=\"line\">        <span class=\"comment\">//function Yo()</span></div><div class=\"line\">       <span class=\"comment\">//展开后  //arguments:null</span></div><div class=\"line\">                <span class=\"comment\">//caller:null</span></div><div class=\"line\">                <span class=\"comment\">//length:0</span></div><div class=\"line\">                <span class=\"comment\">//name:\"Yo\"</span></div><div class=\"line\">                <span class=\"comment\">//prototype:Object</span></div><div class=\"line\">                <span class=\"comment\">//__proto__:()</span></div><div class=\"line\">                <span class=\"comment\">//[[FunctionLocation]]:test.html:22</span></div><div class=\"line\">                <span class=\"comment\">//[[Scopes]]:Scopes[1]</span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>对于这部分更详细的内容，直接细看这一章</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"number-lt-gt-string\"><a href=\"#number-lt-gt-string\" class=\"headerlink\" title=\"number&lt;&gt;string\"></a>number&lt;&gt;string</h3><ul>\n<li><p>parseInt（string，进制数） <code>parseInt（‘11dsad’，10）&gt;&gt;&gt;11</code></p>\n</li>\n<li><p>toString() Number&gt;&gt;&gt;String时可传参数（进制数） <code>10.toString(2)&gt;&gt;&gt;&#39;1010&#39;</code></p>\n</li>\n</ul>\n<h3 id=\"array-lt-gt-string\"><a href=\"#array-lt-gt-string\" class=\"headerlink\" title=\"array&lt;&gt;string\"></a>array&lt;&gt;string</h3><ul>\n<li><code>arr.join(param)</code> @param 分隔符 String格式</li>\n<li><p>`string.split(param) @param 识别分隔符 String格式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"string\">'hello'</span>,b=<span class=\"string\">'llohe'</span>;</div><div class=\"line\">   <span class=\"keyword\">var</span> isTrue=<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>a.split(<span class=\"string\">''</span>).sort()===b.split(<span class=\"string\">''</span>).sort()?<span class=\"literal\">true</span>:<span class=\"literal\">false</span>;</div><div class=\"line\">   isTrue();<span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"for-in语句\"><a href=\"#for-in语句\" class=\"headerlink\" title=\"for-in语句\"></a>for-in语句</h3><ul>\n<li><p>枚举对象属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> <span class=\"built_in\">Object</span>)&#123;</div><div class=\"line\">          <span class=\"keyword\">do</span> something...</div><div class=\"line\">     &#123;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"switch的有趣用法\"><a href=\"#switch的有趣用法\" class=\"headerlink\" title=\"switch的有趣用法\"></a>switch的有趣用法</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num=<span class=\"number\">25</span>;</div><div class=\"line\">     <span class=\"keyword\">switch</span>(<span class=\"literal\">true</span>)&#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> num&lt;<span class=\"number\">0</span>:<span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">case</span> num&gt;<span class=\"number\">0</span>:<span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">default</span>:<span class=\"keyword\">break</span>;</div><div class=\"line\">     &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>switch语句中 默认使用全等符 <code>===</code></li>\n</ul>\n","excerpt":"<p>本文是第二遍系统的读高级程序语言设计（第三版）时的笔记，包括</p>\n<ul>\n<li>平时用的比较少，记忆不深刻的方法API</li>\n<li>结合写代码中遇到的坑与书中知识点的印证（主要是原型和构造对象模式的知识点）</li>\n<li>笔记没有追求全面，只是对于知识点查漏补缺的索引</li>\n</ul>","more":"<h2 id=\"Object-prop-和Object-prop的区别\"><a href=\"#Object-prop-和Object-prop的区别\" class=\"headerlink\" title=\"Object [ prop ]和Object.prop的区别\"></a>Object [ prop ]和Object.prop的区别</h2><ol>\n<li>语法方面的区别 点表示法的对象的属性名是标识符，而后者的属性名则是一个字符串。</li>\n<li>灵活性方面的区别 在JavaScript编写程序中，可以为对象创建任意数目的属性。但使用”.”运算符来存取一个对象的属性时，属性名是用标识符表示的。而在JavaScript程序中，标识符必须被逐字地输入，它们不是一种数据类型，因此程序不能对其操作。也就是说，标识符是静态的，在程序中必须对其进行硬编码。 而使用数组[]表示法来存取一个对象的属性时，属性名是用字符串表示的。字符串是JavaScript的一种数据类型，因此可以在程序运行中操作并创建它们。</li>\n<li><p>性能方面区别 数组[]表示法在存取属性值时会进行表达式运行。而点表示法是直接存取属性值，理论上执行效率会比数组表示法高。性能方面其实可以忽略。 某些场景必须用到数组表示法来动态存取属性值，这个是点表示法无法做到的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> prop=<span class=\"string\">'name'</span>,object=&#123;<span class=\"attr\">name</span>:<span class=\"string\">'dasda'</span>&#125;;</div><div class=\"line\">       <span class=\"built_in\">console</span>.log(object[prop]);  <span class=\"comment\">//dasda</span></div><div class=\"line\">       <span class=\"built_in\">console</span>.log(object.prop);   <span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>总的来说，这两种方法区别上不大，都有对应的使用场景。点表示法一般作为静态对象使用时来存取属性。而数组表示法在动态存取属性时就非常有用。</p>\n</li>\n</ol>\n<h2 id=\"arguments和命名参数单向同步\"><a href=\"#arguments和命名参数单向同步\" class=\"headerlink\" title=\"arguments和命名参数单向同步\"></a>arguments和命名参数单向同步</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</div><div class=\"line\">          <span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]=<span class=\"number\">10</span>;</div><div class=\"line\">          alert(<span class=\"built_in\">arguments</span>[<span class=\"number\">0</span>]+num2);</div><div class=\"line\">     &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>执行add（）会重写第二个参数，arguments对象中的值会自动反应到命名参数，但这是单向的，也就是改变命名参数的值但是arguments对象中的值不会改变，</li>\n<li><p>严格模式中不能设置argumengts对象的值</p>\n<h3 id=\"typeof和instanceof\"><a href=\"#typeof和instanceof\" class=\"headerlink\" title=\"typeof和instanceof\"></a>typeof和instanceof</h3></li>\n<li><p>因为typeof检测引用类型值时，不同浏览器会有不同的结果，所以推荐只用typeof检测基本数据类型，检测值是否存在</p>\n</li>\n<li><p>instanceof</p>\n<ul>\n<li>语法 person instanceof Object</li>\n<li>用来检测引用类型</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Array类型的方法\"><a href=\"#Array类型的方法\" class=\"headerlink\" title=\"Array类型的方法\"></a>Array类型的方法</h2><h3 id=\"Array-isArray-方法\"><a href=\"#Array-isArray-方法\" class=\"headerlink\" title=\"Array.isArray()方法\"></a>Array.isArray()方法</h3><ul>\n<li>解决多个全局执行环境时（多个框架），Array构造函数不同，instanceof你能正确检测对象是不是数组的问题</li>\n<li>支持该方法的浏览器：IE9+、Firefox4+、Safari 5+、Opera 10.5+和Chrome</li>\n</ul>\n<h3 id=\"Array-sort\"><a href=\"#Array-sort\" class=\"headerlink\" title=\"Array.sort()\"></a>Array.sort()</h3><ul>\n<li><p>无论数组项是不是数值，都会调用每一项的tostring（）方法，然后比较字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> values=[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">15</span>];</div><div class=\"line\">alert(values.sort()); <span class=\"comment\">//0,1,10,15,5</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>sort()方法可以传一个比较函数，比较函数接受两个参数（a，b），a&gt;b 返回1，a&lt; b,返回-1，相等返回0。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(a &gt;b )&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a &lt; b )&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"slice-方法\"><a href=\"#slice-方法\" class=\"headerlink\" title=\"slice()方法\"></a>slice()方法</h3><ul>\n<li>slice(startIndex,endIndex)</li>\n<li>返回起始到结束位置之间的项，不包括结束位置,只传入一个参数时，返回索引位置到结束的所有项</li>\n<li><p>不会影响原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> value=[<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> value1=value.slice(<span class=\"number\">2</span>,<span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> value2=value.slice(<span class=\"number\">2</span>);</div><div class=\"line\">alert(value1,<span class=\"string\">'$$$$$'</span>+value2);  <span class=\"comment\">//7,3,8$$$$$7,3,8,2</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"splice-方法\"><a href=\"#splice-方法\" class=\"headerlink\" title=\"splice()方法\"></a>splice()方法</h3><ul>\n<li>splice(startIndex,count,item) //(起始位置，项数，插入项）</li>\n<li><p>返回删除的项</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> value=[<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>] ;</div><div class=\"line\">alert(value.splice(<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)); <span class=\"comment\">// 7</span></div><div class=\"line\">alert(value); <span class=\"comment\">// 1,5,1,2,3,3,8,2</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"indexOf-和lastIndexOf-方法\"><a href=\"#indexOf-和lastIndexOf-方法\" class=\"headerlink\" title=\"indexOf()和lastIndexOf()方法\"></a>indexOf()和lastIndexOf()方法</h3><ul>\n<li>indexof(item,startIndex)||lastIndexOf(item,startIndex) // (项的值,起始位置）</li>\n<li><p>查找比较时使用全等操作符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> value=[<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>];</div><div class=\"line\">alert(value.indexOf(<span class=\"number\">5</span>)); <span class=\"comment\">//1</span></div><div class=\"line\">alert(value.lastIndexOf(<span class=\"number\">5</span>)); <span class=\"comment\">//4</span></div><div class=\"line\">alert(value.indexOf(<span class=\"number\">5</span>,<span class=\"number\">2</span>)); <span class=\"comment\">//4</span></div><div class=\"line\">alert(value.lastIndexOf(<span class=\"number\">5</span>,<span class=\"number\">3</span>)) <span class=\"comment\">//1</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"every-和some-方法\"><a href=\"#every-和some-方法\" class=\"headerlink\" title=\"every()和some()方法\"></a>every()和some()方法</h3><ul>\n<li>every(fn)，传入函数对<strong>每一</strong>项都返回<code>true</code>，这个方法返回<code>true</code></li>\n<li>some(fn),传入函数对<strong>任一</strong>项返回<code>true</code>，这个方法就返回<code>true</code></li>\n</ul>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h3><ul>\n<li>filter(fn)</li>\n<li>返回该函数会返回<code>true</code>的项组成的数组</li>\n</ul>\n<h3 id=\"forEach-和map-方法\"><a href=\"#forEach-和map-方法\" class=\"headerlink\" title=\"forEach()和map()方法\"></a>forEach()和map()方法</h3><ul>\n<li>forEach(item,index,array) || map(item,index,array)</li>\n<li><p>forEach没有返回值,map会返回一个每一项执行函数后返回的值组成的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr1=[<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">43</span>,<span class=\"number\">65</span>,<span class=\"number\">7</span>];</div><div class=\"line\">  <span class=\"keyword\">var</span> arrMap=arr1.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item,index,array</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> item*<span class=\"number\">2</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">  alert(arrMap);<span class=\"comment\">//2,10,18,86,130,14</span></div><div class=\"line\">  alert(arr1);<span class=\"comment\">//1,5,9,43,65,7</span></div><div class=\"line\">  <span class=\"keyword\">var</span> arrFor=arr1.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index,array</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> item*<span class=\"number\">2</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">  alert(arrFor);<span class=\"comment\">//undefined</span></div><div class=\"line\">  alert(arr1);<span class=\"comment\">//1,5,9,43,65,7</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h2><h3 id=\"trim-、trimLeft-、trimRight-方法\"><a href=\"#trim-、trimLeft-、trimRight-方法\" class=\"headerlink\" title=\"trim()、trimLeft()、trimRight()方法\"></a>trim()、trimLeft()、trimRight()方法</h3><ul>\n<li>trim()返回删除前置和后缀空格以后的String副本，对原数据无改变</li>\n<li>trimLeft(),trimRight()分别删除前置和后缀空格</li>\n</ul>\n<h2 id=\"面向对象的程序设计\"><a href=\"#面向对象的程序设计\" class=\"headerlink\" title=\"面向对象的程序设计\"></a>面向对象的程序设计</h2><p>面向对象的程序设计中的描述符等暂时想不到哪里能用到，用到再精读。这里说一下遇到的一个，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Pig</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Pig.prototype = &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">move</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.move();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> pigPlayer=<span class=\"keyword\">new</span> Pig();</div><div class=\"line\">setInterval(pigPlayer.render.bind(pigPlayer),<span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p>重写原型时会造成<code>Pig.prototype.constructor===Pig//false</code>,而像下面重写会造成<code>constructor</code>变为可枚举属性。记一下这个坑，非要爬坑详见高程P155.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Pig.prototype = &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">constructor</span>:Pig,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">move</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.move();</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><p>这里只说一个我第一次接触时的误区，<strong>构造函数创建的实例中是没有<code>prototype</code>这个属性的，只有<code>_proto_</code>,所以本质上我们所说的实例的原型是构造器函数的原型</strong>，如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Yo=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.name=<span class=\"string\">'ddd'</span></div><div class=\"line\">        &#125;;</div><div class=\"line\">        <span class=\"keyword\">var</span> yo=<span class=\"keyword\">new</span> Yo;</div><div class=\"line\">        <span class=\"built_in\">console</span>.dir(yo);</div><div class=\"line\">        <span class=\"comment\">//Yo  </span></div><div class=\"line\">        <span class=\"comment\">//展开后    //name:'ddd'</span></div><div class=\"line\">                <span class=\"comment\">//_proto_:Object</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.dir(Yo)</div><div class=\"line\">        <span class=\"comment\">//function Yo()</span></div><div class=\"line\">       <span class=\"comment\">//展开后  //arguments:null</span></div><div class=\"line\">                <span class=\"comment\">//caller:null</span></div><div class=\"line\">                <span class=\"comment\">//length:0</span></div><div class=\"line\">                <span class=\"comment\">//name:\"Yo\"</span></div><div class=\"line\">                <span class=\"comment\">//prototype:Object</span></div><div class=\"line\">                <span class=\"comment\">//__proto__:()</span></div><div class=\"line\">                <span class=\"comment\">//[[FunctionLocation]]:test.html:22</span></div><div class=\"line\">                <span class=\"comment\">//[[Scopes]]:Scopes[1]</span></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>对于这部分更详细的内容，直接细看这一章</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"number-lt-gt-string\"><a href=\"#number-lt-gt-string\" class=\"headerlink\" title=\"number&lt;&gt;string\"></a>number&lt;&gt;string</h3><ul>\n<li><p>parseInt（string，进制数） <code>parseInt（‘11dsad’，10）&gt;&gt;&gt;11</code></p>\n</li>\n<li><p>toString() Number&gt;&gt;&gt;String时可传参数（进制数） <code>10.toString(2)&gt;&gt;&gt;&#39;1010&#39;</code></p>\n</li>\n</ul>\n<h3 id=\"array-lt-gt-string\"><a href=\"#array-lt-gt-string\" class=\"headerlink\" title=\"array&lt;&gt;string\"></a>array&lt;&gt;string</h3><ul>\n<li><code>arr.join(param)</code> @param 分隔符 String格式</li>\n<li><p>`string.split(param) @param 识别分隔符 String格式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"string\">'hello'</span>,b=<span class=\"string\">'llohe'</span>;</div><div class=\"line\">   <span class=\"keyword\">var</span> isTrue=<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>a.split(<span class=\"string\">''</span>).sort()===b.split(<span class=\"string\">''</span>).sort()?<span class=\"literal\">true</span>:<span class=\"literal\">false</span>;</div><div class=\"line\">   isTrue();<span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"for-in语句\"><a href=\"#for-in语句\" class=\"headerlink\" title=\"for-in语句\"></a>for-in语句</h3><ul>\n<li><p>枚举对象属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> <span class=\"built_in\">Object</span>)&#123;</div><div class=\"line\">          <span class=\"keyword\">do</span> something...</div><div class=\"line\">     &#123;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"switch的有趣用法\"><a href=\"#switch的有趣用法\" class=\"headerlink\" title=\"switch的有趣用法\"></a>switch的有趣用法</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num=<span class=\"number\">25</span>;</div><div class=\"line\">     <span class=\"keyword\">switch</span>(<span class=\"literal\">true</span>)&#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> num&lt;<span class=\"number\">0</span>:<span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">case</span> num&gt;<span class=\"number\">0</span>:<span class=\"keyword\">break</span>;</div><div class=\"line\">          <span class=\"keyword\">default</span>:<span class=\"keyword\">break</span>;</div><div class=\"line\">     &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>switch语句中 默认使用全等符 <code>===</code></li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciy89a38o00002kofxjrpn4j5","category_id":"ciy89a39y00042kof041b4pxk","_id":"ciy89a3bb000c2koflft5e342"},{"post_id":"ciy89a3b100092kofwr4rb4hr","category_id":"ciy89a39y00042kof041b4pxk","_id":"ciy89a3bf000f2kof6qw56zzr"},{"post_id":"ciy89a39k00022kofabq0h4ed","category_id":"ciy89a3b5000a2kofwcxhm6ua","_id":"ciy89a3bj000h2kofyeujotfp"},{"post_id":"ciy89a3ak00062kofuq0iuzjd","category_id":"ciy89a3bc000d2kofynhw8xmz","_id":"ciy89a3bv000m2kof1dk3l9eh"},{"post_id":"ciy89a3ar00082kofra3gvza7","category_id":"ciy89a3bk000j2kof0rt7vez1","_id":"ciy89a3by000o2kofppem3qcs"}],"PostTag":[{"post_id":"ciy89a38o00002kofxjrpn4j5","tag_id":"ciy89a3ai00052kof2lsfmw8v","_id":"ciy89a3bh000g2kofkuo86hwd"},{"post_id":"ciy89a38o00002kofxjrpn4j5","tag_id":"ciy89a3b7000b2kofk1kflmv5","_id":"ciy89a3bk000i2kofq6hv7srf"},{"post_id":"ciy89a39k00022kofabq0h4ed","tag_id":"ciy89a3bd000e2kofr16dssyc","_id":"ciy89a3bt000l2kof98f3jmge"},{"post_id":"ciy89a3ak00062kofuq0iuzjd","tag_id":"ciy89a3bl000k2kofvywlft3c","_id":"ciy89a3c0000q2kofzs9znkz5"},{"post_id":"ciy89a3ak00062kofuq0iuzjd","tag_id":"ciy89a3bw000n2kof3k6k6t0v","_id":"ciy89a3c1000r2kof02i4uewo"},{"post_id":"ciy89a3ar00082kofra3gvza7","tag_id":"ciy89a3by000p2kofc1a1thvr","_id":"ciy89a3cp000x2kofi34wk193"},{"post_id":"ciy89a3ar00082kofra3gvza7","tag_id":"ciy89a3c1000s2kofcgr85whg","_id":"ciy89a3ct000y2kof61ets0cv"},{"post_id":"ciy89a3ar00082kofra3gvza7","tag_id":"ciy89a3c3000t2kofxvta0u6b","_id":"ciy89a3cw00102kofwv5l3upx"},{"post_id":"ciy89a3ar00082kofra3gvza7","tag_id":"ciy89a3ce000u2koft6sjkgo3","_id":"ciy89a3cw00112kofwx9gdoig"},{"post_id":"ciy89a3ar00082kofra3gvza7","tag_id":"ciy89a3ci000v2kofkg1tz0kw","_id":"ciy89a3cx00122kof0j4n53n9"},{"post_id":"ciy89a3b100092kofwr4rb4hr","tag_id":"ciy89a3b7000b2kofk1kflmv5","_id":"ciy89a3cx00132kofqbaon6nc"},{"post_id":"ciy89a3b100092kofwr4rb4hr","tag_id":"ciy89a3cu000z2kof7j95pd8e","_id":"ciy89a3cz00142kofqua3w61e"}],"Tag":[{"name":"异步","_id":"ciy89a3ai00052kof2lsfmw8v"},{"name":"JavaScript","_id":"ciy89a3b7000b2kofk1kflmv5"},{"name":"hexo","_id":"ciy89a3bd000e2kofr16dssyc"},{"name":"video","_id":"ciy89a3bl000k2kofvywlft3c"},{"name":"HTML5","_id":"ciy89a3bw000n2kof3k6k6t0v"},{"name":"素材资源","_id":"ciy89a3by000p2kofc1a1thvr"},{"name":"在线工具","_id":"ciy89a3c1000s2kofcgr85whg"},{"name":"Chrome插件","_id":"ciy89a3c3000t2kofxvta0u6b"},{"name":"时间管理","_id":"ciy89a3ce000u2koft6sjkgo3"},{"name":"快乐的coding","_id":"ciy89a3ci000v2kofkg1tz0kw"},{"name":"读书","_id":"ciy89a3cu000z2kof7j95pd8e"}]}}